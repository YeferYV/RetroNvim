# â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®
# â”‚ systemctl start docker && act -s VSCE_TOKEN -s GITHUB_TOKEN="$(gh auth token)" -j upload-release --artifact-server-path ./artifacts --action-offline-mode --action-cache-path "$HOME/.cache/act" â”‚
# â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯

# https://github.com/nektos/act/issues/2433
name: Upload_Release

on:
  push:
    branches:
      - main

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# https://josh-ops.com/posts/gh-auth-login-in-actions/
# https://stackoverflow.com/questions/76830110/github-cli-from-github-actions-workflow
# https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/accessing-contextual-information-about-workflow-runs#secrets-context
# Since `VSCE_TOKEN` is a secret variable, it is not immediately usable as an environment variable. see: https://github.com/microsoft/vscode-docs/pull/3857
env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} # setting GH_TOKEN for the entire workflow
  VSCE_PAT: ${{ secrets.VSCE_TOKEN }}

# https://github.com/googleapis/release-please-action?tab=readme-ov-file#workflow-permissions
permissions:
  contents: write
  pull-requests: write

jobs:
  upload-release:
    runs-on: ubuntu-latest

    steps:

      # https://www.youtube.com/watch?v=P0wAXh5UOnM
      - uses: googleapis/release-please-action@v4
        id: release
        with:
          release-type: node

      - name: Checkout ðŸ›¬
        if: ${{ steps.release.outputs.release_created }}
        uses: actions/checkout@v4

      - name: Publish to vscode marketplace ðŸš€
        if: ${{ steps.release.outputs.release_created }}
        run: |
          git submodule update --init;
          rm -rf ./nvim/plugins/site/pack/deps/opt/{flash.nvim,gitsigns.nvim,mason.nvim,nvim-lspconfig,nvim-treesitter,nvim-treesitter-textobjects}/tests
          rm -rf ./nvim/plugins/site/pack/deps/start/mini.nvim/tests

          curl -L https://github.com/jtroo/kanata/releases/download/v1.8.0-prerelease-1/kanata_cmd_allowed               --create-dirs --output  "./bin/linux-x64/kanata"                                                                                                                                  && chmod +x "./bin/linux-x64/kanata"
          curl -L https://github.com/neovim/neovim/releases/download/nightly/nvim.appimage                               --create-dirs --output  "./bin/linux-x64/nvim"                                                                                                                                    && chmod +x "./bin/linux-x64/nvim"
          curl -L https://github.com/sxyazi/yazi/releases/download/v0.4.2/yazi-x86_64-unknown-linux-gnu.zip              --create-dirs --output  "/tmp/yazi-linux.zip"   && unzip "/tmp/yazi-linux.zip" -d "/tmp"   && cp -r    "/tmp/yazi-x86_64-unknown-linux-gnu/yazi"   "./bin/linux-x64"              && chmod +x "./bin/linux-x64/yazi"

          curl -L https://github.com/jtroo/kanata/releases/download/v1.8.0-prerelease-1/kanata_macos_cmd_allowed_x86_64  --create-dirs --output  "./bin/darwin-x64/kanata"                                                                                                                                 && chmod +x "./bin/darwin-x64/kanata"
          curl -L https://github.com/neovim/neovim/releases/download/nightly/nvim-macos-x86_64.tar.gz                    | tar -xzf- --directory "./bin/darwin-x64"
          curl -L https://github.com/sxyazi/yazi/releases/download/v0.4.2/yazi-x86_64-apple-darwin.zip                   --create-dirs --output  "/tmp/yazi-macos.zip" && unzip "/tmp/yazi-macos.zip" -d "/tmp"     && cp -r    "/tmp/yazi-x86_64-apple-darwin/yazi"        "./bin/darwin-x64"             && chmod +x "./bin/darwin-x64/yazi"

          yes | npx vsce package
          npx vsce publish # --pre-release
          rm -rf ./bin/{linux-x64,darwin-x64}

          curl -L https://github.com/jtroo/kanata/releases/download/v1.8.0-prerelease-1/kanata_cmd_allowed.exe           --create-dirs --output  "./bin/win32-x64/kanata.exe"
          curl -L https://github.com/neovim/neovim/releases/download/nightly/nvim-win64.zip                              --create-dirs --output  "/tmp/nvim-windows.zip" && unzip "/tmp/nvim-windows.zip" -d "./bin/win32-x64"
          curl -L https://github.com/sxyazi/yazi/releases/download/v0.4.2/yazi-x86_64-pc-windows-msvc.zip                --create-dirs --output  "/tmp/yazi-windows.zip" && unzip "/tmp/yazi-windows.zip" -d "/tmp" && cp -r    "/tmp/yazi-x86_64-pc-windows-msvc/yazi.exe" "./bin/win32-x64"
          curl -L https://repo.prefix.dev/conda-forge/win-64/vc14_runtime-14.42.34433-he29a5d6_23.conda                  --create-dirs --output  "/tmp/vc14-runtime.zip" && unzip "/tmp/vc14-runtime.zip" -d "/tmp" && tar -xvf "/tmp/pkg-vc14_runtime-14.42.34433-he29a5d6_23.tar.zst" --directory="/tmp" && cp "/tmp/vcruntime140.dll" "./bin/win32-x64/nvim-win64/bin"

          rm -rf ./bin/win32-x64/nvim-win64/bin/{nvim.pdb,dbghelp.dll}
          yes | npx vsce package --target win32-x64
          npx vsce publish --target win32-x64 # --pre-release

          # npx release-please release-pr --release-type node --repo-url https://github.com/yeferyv/retronvim --token $(gh auth token)
          # npx release-please github-release --draft --release-type node --repo-url https://github.com/yeferyv/retronvim --token $(gh auth token)
          # npx standard-version
          # previous_tag="$(git tag --sort=creatordate | tail -n 2 | head -n 1)"
          # sed -i "/$previous_tag/,$ d" CHANGELOG.md # deletes from previous_tag to end of file
          # echo "## Manual Install\n- open vscode command palette then type \`Extension: Install from VSIX\`" >> CHANGELOG.md
          # gh release create "${{ github.ref_name }}" *.vsix --notes-file CHANGELOG.md --generate-notes --draft # --prerelease

      ## `act` doesn't come with `gh` command
      # - uses: actions4gh/setup-gh@v1
      # - run: gh release create "${{ github.ref_name }}" *.vsix --notes-file CHANGELOG.md --generate-notes --draft # --prerelease

      - name: Github release ðŸ“¦
        if: ${{ steps.release.outputs.release_created }}
        run:
            gh release upload ${{ steps.release.outputs.tag_name }} *.vsix

      - name: Upload files to `./artifacts` ðŸ“¤
        if: ${{ steps.release.outputs.release_created }}
        uses: actions/upload-artifact@v4
        with:
          name: my-release
          path: ./retronvim-*.vsix
          # path: .
