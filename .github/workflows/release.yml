# â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®
# â”‚ systemctl start docker && act -s VSCE_TOKEN -s GITHUB_TOKEN="$(gh auth token)" -j upload-release --artifact-server-path ./artifacts --action-offline-mode --action-cache-path "$HOME/.cache/act" â”‚
# â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯

# https://github.com/nektos/act/issues/2433
name: Upload_Release

on:
  push:
    branches:
      - main

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# https://josh-ops.com/posts/gh-auth-login-in-actions/
# https://stackoverflow.com/questions/76830110/github-cli-from-github-actions-workflow
# https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/accessing-contextual-information-about-workflow-runs#secrets-context
# Since `VSCE_TOKEN` is a secret variable, it is not immediately usable as an environment variable. see: https://github.com/microsoft/vscode-docs/pull/3857
env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} # setting GH_TOKEN for the entire workflow
  VSCE_PAT: ${{ secrets.VSCE_TOKEN }}

# https://github.com/googleapis/release-please-action?tab=readme-ov-file#workflow-permissions
permissions:
  contents: write
  pull-requests: write

jobs:
  upload-release:
    runs-on: ubuntu-latest

    steps:
      # https://www.youtube.com/watch?v=P0wAXh5UOnM
      - uses: googleapis/release-please-action@v4
        id: release
        with:
          release-type: node

      - name: Checkout ðŸ›¬
        if: ${{ steps.release.outputs.release_created }}
        uses: actions/checkout@v4

      - name: Publish to vscode marketplace ðŸš€
        if: ${{ steps.release.outputs.release_created }}
        run: |
          git submodule update --init;
          rm -rf ./nvim/plugins/site/pack/deps/opt/snacks.nvim/tests
          rm -rf ./nvim/plugins/site/pack/deps/start/mini.nvim/tests

          curl -L pixi.sh/install.sh | bash
          source ~/.bashrc

          curl -L https://github.com/ryanoasis/nerd-fonts/releases/download/v3.4.0/FiraCode.tar.xz                         | bsdtar -xzf- --directory "/tmp"                                            && mkdir -p "bin/nerd-fonts/patched-fonts/FiraCode"                                           && mv /tmp/{FiraCodeNerdFont-Regular.ttf,FiraCodeNerdFont-Bold.ttf} bin/nerd-fonts/patched-fonts/FiraCode
          curl -L https://raw.githubusercontent.com/ryanoasis/nerd-fonts/refs/heads/master/install.ps1                     --create-dirs  --output    "bin/nerd-fonts/install.ps1"

          curl -L https://github.com/neovim/neovim/releases/download/v0.11.2/nvim-macos-x86_64.tar.gz                      | bsdtar -xzf- --directory "/tmp"                                            && mkdir -p "bin/macos/envs"                                                                  && mv /tmp/nvim-macos-x86_64 bin/macos/envs/macos
          curl -L https://github.com/jtroo/kanata/releases/download/v1.8.1/kanata_macos_cmd_allowed_x86_64                 --create-dirs  --output    "bin/macos/envs/macos/bin/kanata"                 && chmod +x "bin/macos/envs/macos/bin/kanata"
          curl -L https://github.com/prefix-dev/pixi/releases/download/v0.48.0/pixi-x86_64-apple-darwin                    --create-dirs  --output    "bin/macos/envs/macos/bin/pixi"                   && chmod +x "bin/macos/envs/macos/bin/pixi"
          curl -L https://github.com/sxyazi/yazi/releases/download/v25.5.31/yazi-x86_64-apple-darwin.zip                   | bsdtar -xzf- --directory "/tmp"                                            && cp /tmp/yazi-x86_64-apple-darwin/{ya,yazi}       "bin/macos/envs/macos/bin"                && chmod +x bin/macos/envs/macos/bin/{ya,yazi}
          curl -L https://github.com/starship/starship/releases/download/v1.23.0/starship-x86_64-apple-darwin.tar.gz       | bsdtar -xzf- --directory "bin/macos/envs/macos/bin"
          curl -L https://github.com/junegunn/fzf/releases/download/v0.62.0/fzf-0.62.0-darwin_amd64.tar.gz                 | bsdtar -xzf- --directory "bin/macos/envs/macos/bin"

          yes | npx vsce package
          npx       vsce publish
          rm -rf bin/macos

          curl -L https://github.com/neovim/neovim/releases/download/v0.11.2/nvim-linux-x86_64.appimage                    --create-dirs  --output    "bin/linux/envs/linux/bin/nvim"                   && chmod +x "bin/linux/envs/linux/bin/nvim"
          curl -L https://github.com/jtroo/kanata/releases/download/v1.8.1/kanata_cmd_allowed                              --create-dirs  --output    "bin/linux/envs/linux/bin/kanata"                 && chmod +x "bin/linux/envs/linux/bin/kanata"
          curl -L https://github.com/prefix-dev/pixi/releases/download/v0.48.0/pixi-x86_64-unknown-linux-musl              --create-dirs  --output    "bin/linux/envs/linux/bin/pixi"                   && chmod +x "bin/linux/envs/linux/bin/pixi"
          curl -L https://github.com/sxyazi/yazi/releases/download/v25.5.31/yazi-x86_64-unknown-linux-musl.zip             | bsdtar -xzf- --directory "/tmp"                                            && cp /tmp/yazi-x86_64-unknown-linux-musl/{ya,yazi} bin/linux/envs/linux/bin                  && chmod +x bin/linux/envs/linux/bin/{ya,yazi}
          curl -L https://github.com/starship/starship/releases/download/v1.23.0/starship-x86_64-unknown-linux-musl.tar.gz | bsdtar -xzf- --directory "bin/linux/envs/linux/bin"
          curl -L https://github.com/junegunn/fzf/releases/download/v0.62.0/fzf-0.62.0-linux_amd64.tar.gz                  | bsdtar -xzf- --directory="bin/linux/envs/linux/bin"

          mkdir build_zsh_appimage
          cd    build_zsh_appimage
          pixi  init
          pixi  add zsh
          mkdir -p                                       AppDir/usr
          cp    -r .pixi/envs/default/*                  AppDir/usr/
          echo  '#!/bin/bash'                         >> AppDir/AppRun
          echo  'exec "$APPDIR/usr/bin/zsh" "$@"'     >> AppDir/AppRun
          chmod +x                                       AppDir/AppRun
          echo  '[Desktop Entry]'                     >> AppDir/zsh.desktop
          echo  'Name=zsh'                            >> AppDir/zsh.desktop
          echo  'Exec=zsh'                            >> AppDir/zsh.desktop
          echo  'Icon=retronvim-logo'                 >> AppDir/zsh.desktop
          echo  'Type=Application'                    >> AppDir/zsh.desktop
          echo  'Categories=System;TerminalEmulator;' >> AppDir/zsh.desktop
          cp    ../assets/retronvim-logo.png             AppDir/
          curl  -o appimagetool -L https://github.com/AppImage/appimagetool/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod +x appimagetool
          ./appimagetool AppDir zsh.appimage
          cp    zsh.appimage ../bin/linux/envs/linux/bin/zsh
          cd    ..
          rm    -r build_zsh_appimage

          yes | npx vsce package --target linux-x64
          npx       vsce publish --target linux-x64
          rm -rf bin/linux

          curl -L https://github.com/neovim/neovim/releases/download/v0.11.2/nvim-win64.zip                                | bsdtar -xzf- --directory "/tmp"                                            && mkdir -p bin/windows/envs/windows                                                          && mv /tmp/nvim-win64       bin/windows/envs/windows/Library
          curl -L https://github.com/jtroo/kanata/releases/download/v1.8.1/kanata_cmd_allowed.exe                          --create-dirs  --output    "bin/windows/envs/windows/Library/bin/kanata.exe"
          curl -L https://github.com/prefix-dev/pixi/releases/download/v0.48.0/pixi-x86_64-pc-windows-msvc.exe             --create-dirs  --output    "bin/windows/envs/windows/Library/bin/pixi.exe"
          curl -L https://github.com/sxyazi/yazi/releases/download/v25.5.31/yazi-x86_64-pc-windows-msvc.zip                | bsdtar -xzf- --directory "/tmp"                                            && cp /tmp/yazi-x86_64-pc-windows-msvc/{ya.exe,yazi.exe} bin/windows/envs/windows/Library/bin
          curl -L https://github.com/starship/starship/releases/download/v1.23.0/starship-x86_64-pc-windows-msvc.zip       | bsdtar -xzf- --directory "bin/windows/envs/windows/Library/bin"
          curl -L https://github.com/junegunn/fzf/releases/download/v0.62.0/fzf-0.62.0-windows_amd64.zip                   | bsdtar -xzf- --directory "bin/windows/envs/windows/Library/bin"
          curl -L https://repo.prefix.dev/conda-forge/win-64/vc14_runtime-14.42.34433-he29a5d6_23.conda                    | bsdtar -xzf- --directory "/tmp"                                            && bsdtar -xvf "/tmp/pkg-vc14_runtime-14.42.34433-he29a5d6_23.tar.zst" --directory="/tmp"     && mv /tmp/vcruntime140.dll bin/windows/envs/windows/Library/bin

          mkdir -p powershell/modules/psreadline
          curl -L https://cdn.powershellgallery.com/packages/psreadline.2.4.2-beta2.nupkg                                  | bsdtar -xzf- --directory "powershell/modules/psreadline"

          export PIXI_HOME="$PWD/bin/windows"
          pixi global install --platform win-64 m2-file --environment windows # vc14_runtime

          yes | npx vsce package --target win32-x64
          npx       vsce publish --target win32-x64

          # npx release-please release-pr             --release-type node --repo-url https://github.com/yeferyv/retronvim --token $(gh auth token)
          # npx release-please github-release --draft --release-type node --repo-url https://github.com/yeferyv/retronvim --token $(gh auth token)
          # npx standard-version
          # previous_tag="$(git tag --sort=creatordate | tail -n 2 | head -n 1)"
          # sed -i "/$previous_tag/,$ d" CHANGELOG.md # deletes from previous_tag to end of file
          # echo "## Manual Install\n- open vscode command palette then type \`Extension: Install from VSIX\`" >> CHANGELOG.md
          # gh release create "${{ github.ref_name }}" *.vsix --notes-file CHANGELOG.md --generate-notes --draft # --prerelease

      ## `act` doesn't come with `gh` command
      # - uses: actions4gh/setup-gh@v1
      # - run: gh release create "${{ github.ref_name }}" *.vsix --notes-file CHANGELOG.md --generate-notes --draft # --prerelease

      - name: Github release ðŸ“¦
        if: ${{ steps.release.outputs.release_created }}
        run: gh release upload ${{ steps.release.outputs.tag_name }} *.vsix

      - name: Upload files to `./artifacts` ðŸ“¤
        if: ${{ steps.release.outputs.release_created }}
        uses: actions/upload-artifact@v4
        with:
          name: my-release
          path: ./retronvim-*.vsix
          # path: .
