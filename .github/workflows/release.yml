# â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®
# â”‚ systemctl start docker && act -s VSCE_TOKEN -s GITHUB_TOKEN="$(gh auth token)" -j upload-release --artifact-server-path ./artifacts --action-offline-mode --action-cache-path "$HOME/.cache/act" â”‚
# â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯

# https://github.com/nektos/act/issues/2433
name: Upload_Release

on:
  push:
    branches:
      - main

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# https://josh-ops.com/posts/gh-auth-login-in-actions/
# https://stackoverflow.com/questions/76830110/github-cli-from-github-actions-workflow
# https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/accessing-contextual-information-about-workflow-runs#secrets-context
# Since `VSCE_TOKEN` is a secret variable, it is not immediately usable as an environment variable. see: https://github.com/microsoft/vscode-docs/pull/3857
env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} # setting GH_TOKEN for the entire workflow
  VSCE_PAT: ${{ secrets.VSCE_TOKEN }}

# https://github.com/googleapis/release-please-action?tab=readme-ov-file#workflow-permissions
permissions:
  contents: write
  pull-requests: write

jobs:
  upload-release:
    runs-on: ubuntu-latest

    steps:
      # https://www.youtube.com/watch?v=P0wAXh5UOnM
      - uses: googleapis/release-please-action@v4
        id: release
        with:
          release-type: node

      - name: Checkout ðŸ›¬
        if: ${{ steps.release.outputs.release_created }}
        uses: actions/checkout@v4

      - name: Publish to vscode marketplace ðŸš€
        if: ${{ steps.release.outputs.release_created }}
        run: |

          ###############################################################################################################################################################################################################################################################################################################################################################

          git submodule update --init;
          rm -rf ./nvim/plugins/site/pack/deps/opt/snacks.nvim/tests
          rm -rf ./nvim/plugins/site/pack/deps/start/mini.nvim/tests

          curl -L pixi.sh/install.sh | bash
          source ~/.bashrc
          pixi global install p7zip

          curl -L https://github.com/ryanoasis/nerd-fonts/releases/download/v3.4.0/FiraCode.tar.xz                             | bsdtar -xzf- --directory "/tmp"                                            && mkdir -p "bin/nerd-fonts/patched-fonts/FiraCode" && cp /tmp/{FiraCodeNerdFont-Regular.ttf,FiraCodeNerdFont-Bold.ttf} bin/nerd-fonts/patched-fonts/FiraCode
          curl -L https://raw.githubusercontent.com/ryanoasis/nerd-fonts/refs/heads/master/install.ps1                         --create-dirs  --output    "bin/nerd-fonts/install.ps1"

          ###############################################################################################################################################################################################################################################################################################################################################################

          curl -L https://github.com/neovim/neovim/releases/download/v0.11.2/nvim-macos-x86_64.tar.gz                          | bsdtar -xzf- --directory "/tmp"                                            && mkdir -p "bin/env"                               && cp -r /tmp/nvim-macos-x86_64 bin/env/bin
          curl -L https://github.com/jtroo/kanata/releases/download/v1.9.0/kanata_macos_cmd_allowed_x86_64                     --create-dirs  --output    "bin/env/bin/kanata"                              && chmod +x "bin/env/bin/kanata"

          (
            mkdir bin/pixi_pack
            cd    bin/pixi_pack
            pixi init
            pixi global install pixi-pack
            pixi add       --platform osx-64 bat=0.25.0 eza=0.21.4 fzf=0.62.0 git=2.49.0 lazygit=0.52.0 less=679 pixi=0.48.2 p7zip=16.02 ripgrep=14.1.1 starship=1.22.1 yazi=25.5.31 # nvim=0.11.2 complains about treesitter for lua filetype
            pixi-pack pack --platform osx-64 --create-executable
            cp    environment.sh ..
            cd ..
            rm -r pixi_pack
          )

          yes | npx vsce package
          npx       vsce publish
          rm -rf bin/environment.sh

          ###############################################################################################################################################################################################################################################################################################################################################################

          curl -L https://github.com/neovim/neovim/releases/download/v0.11.2/nvim-linux-x86_64.appimage                        --create-dirs  --output    "bin/env/bin/nvim"                                && chmod +x "bin/env/nvim"
          curl -L https://github.com/jtroo/kanata/releases/download/v1.9.0/kanata_cmd_allowed                                  --create-dirs  --output    "bin/env/bin/kanata"                              && chmod +x env/bin/kanata

          (
            pixi global install pkg-config=0.29.2 glib=2.84.2 gobject-introspection=1.84.0 gtk4=4.14.1 libvulkan-loader=1.4.313.0 rust=1.87.0 rust-src=1.87.0 --environment rust
            cargo install ripdrag --version 0.4.10
            cp ~/.cargo/bin/ripdrag bin/env/bin
          )
          (
            mkdir bin/pixi_pack
            cd    bin/pixi_pack
            pixi init
            pixi global install pixi-pack
            pixi add       --platform linux-64 bat=0.25.0 eza=0.21.4 fzf=0.62.0 git=2.49.0 lazygit=0.52.0 less=679 pixi=0.48.2 p7zip=16.02 ripgrep=14.1.1 starship=1.22.1 yazi=25.5.31 zsh=5.9 # nvim=0.11.2 complains about treesitter for lua filetype
            pixi-pack pack --platform linux-64 --create-executable
            cp    environment.sh ..
            cd ..
            rm -r pixi_pack
          )

          yes | npx vsce package --target linux-x64
          npx       vsce publish --target linux-x64
          rm -rf bin/environment.sh

          ###############################################################################################################################################################################################################################################################################################################################################################

          curl -L https://github.com/neovim/neovim/releases/download/v0.11.2/nvim-win64.zip                                    | bsdtar -xzf- --directory "/tmp"                                            && mkdir -p bin/windows/envs/windows                && cp -r /tmp/nvim-win64       bin/windows/envs/windows/Library
          curl -L https://github.com/jtroo/kanata/releases/download/v1.9.0/kanata_cmd_allowed.exe                              --create-dirs  --output    "bin/windows/envs/windows/Library/bin/kanata.exe"
          curl -L https://github.com/prefix-dev/pixi/releases/download/v0.48.2/pixi-x86_64-pc-windows-msvc.zip                 | bsdtar -xzf- --directory "bin/windows/envs/windows/Library/bin/"
          curl -L https://github.com/ip7z/7zip/releases/download/24.09/7zr.exe                                                 --create-dirs  --output    "bin/7zr.exe"
          curl -L https://github.com/git-for-windows/git/releases/download/v2.50.0.windows.1/MinGit-2.50.0-busybox-64-bit.zip  | bsdtar -xzf- --directory "bin/windows/envs/windows/Library"

          (
            export PIXI_HOME="$PWD/bin/windows"
            pixi global install --platform win-64 bat=0.25.0 eza=0.21.4 fzf=0.62.0 lazygit=0.52.0 less=679 m2-file=5.46.2 starship=1.22.1 ripgrep=14.1.1 yazi=25.5.31 7zip=24.08 --environment windows
            mv bin/windows/envs/windows/bin/{bat.exe,less.exe,lesskey.exe,rg.exe,starship.exe} bin/windows/envs/windows/Library/bin/
          )
          (
            mkdir -p powershell/modules/psreadline
            curl -L https://cdn.powershellgallery.com/packages/psreadline.2.4.2-beta2.nupkg                                      | bsdtar -xzf- --directory "powershell/modules/psreadline"
          )
          (
            cd bin
            7z a -mx9 windows.7z windows
          )

          rm -r bin/windows
          yes | npx vsce package --target win32-x64
          npx       vsce publish --target win32-x64

          ###############################################################################################################################################################################################################################################################################################################################################################

      - name: Github release ðŸ“¦
        if: ${{ steps.release.outputs.release_created }}
        run: gh release upload ${{ steps.release.outputs.tag_name }} *.vsix

      - name: Upload files to `./artifacts` ðŸ“¤
        if: ${{ steps.release.outputs.release_created }}
        uses: actions/upload-artifact@v4
        with:
          name: my-release
          path: ./retronvim-*.vsix
