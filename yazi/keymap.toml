[mgr]

prepend_keymap = [

  # Navigation
	{ on = [   "J"   ], run = "seek 1",    desc = "preview down 3 lines" },
	{ on = [   "K"   ], run = "seek -1",   desc = "preview up 3 lines" },
	{ on = [   "j"   ], run = "arrow 1",   desc = "down until end of list" },
	{ on = [   "k"   ], run = "arrow -1",  desc = "up until start of list " },
	{ on = [ "<A-j>" ], run = "arrow 10",  desc = "move cursor down 10 lines" },
	{ on = [ "<A-k>" ], run = "arrow -10", desc = "move cursor up 10 lines" },
	{ on = [   "R"   ], run = "refresh",   desc = "refresh" },

	# Search by First Char
	{ on = [ "f", "a" ], run = "find_do '^a' --smart", desc = "find ^a" },
	{ on = [ "f", "b" ], run = "find_do '^b' --smart", desc = "find ^b" },
	{ on = [ "f", "c" ], run = "find_do '^c' --smart", desc = "find ^c" },
	{ on = [ "f", "d" ], run = "find_do '^d' --smart", desc = "find ^d" },
	{ on = [ "f", "e" ], run = "find_do '^e' --smart", desc = "find ^e" },
	{ on = [ "f", "f" ], run = "find_do '^f' --smart", desc = "find ^f" },
	{ on = [ "f", "g" ], run = "find_do '^g' --smart", desc = "find ^g" },
	{ on = [ "f", "h" ], run = "find_do '^h' --smart", desc = "find ^h" },
	{ on = [ "f", "i" ], run = "find_do '^i' --smart", desc = "find ^i" },
	{ on = [ "f", "j" ], run = "find_do '^j' --smart", desc = "find ^j" },
	{ on = [ "f", "k" ], run = "find_do '^k' --smart", desc = "find ^k" },
	{ on = [ "f", "l" ], run = "find_do '^l' --smart", desc = "find ^l" },
	{ on = [ "f", "m" ], run = "find_do '^m' --smart", desc = "find ^m" },
	{ on = [ "f", "n" ], run = "find_do '^n' --smart", desc = "find ^n" },
	{ on = [ "f", "o" ], run = "find_do '^o' --smart", desc = "find ^o" },
	{ on = [ "f", "p" ], run = "find_do '^p' --smart", desc = "find ^p" },
	{ on = [ "f", "q" ], run = "find_do '^q' --smart", desc = "find ^q" },
	{ on = [ "f", "r" ], run = "find_do '^r' --smart", desc = "find ^r" },
	{ on = [ "f", "s" ], run = "find_do '^s' --smart", desc = "find ^s" },
	{ on = [ "f", "t" ], run = "find_do '^t' --smart", desc = "find ^t" },
	{ on = [ "f", "u" ], run = "find_do '^u' --smart", desc = "find ^u" },
	{ on = [ "f", "v" ], run = "find_do '^v' --smart", desc = "find ^v" },
	{ on = [ "f", "w" ], run = "find_do '^w' --smart", desc = "find ^w" },
	{ on = [ "f", "x" ], run = "find_do '^x' --smart", desc = "find ^x" },
	{ on = [ "f", "y" ], run = "find_do '^y' --smart", desc = "find ^y" },
	{ on = [ "f", "z" ], run = "find_do '^z' --smart", desc = "find ^z" },

	# Filter
	{ on = [ "F" ],      run = """ filter --smart                                          """,                  desc = "Filter" },
	{ on = [ "g", "d" ], run = """ cd ~/Documents                                          """,                  desc = "Goto ~/Documents" },
	{ on = [ "g", "D" ], run = """ cd ~/Downloads                                          """,                  desc = "Goto ~/Downloads" },
	{ on = [ "g", "r" ], run = """ shell -- ya emit cd "$(git rev-parse --show-toplevel)"  """,                  desc = "Goto git root" },
	{ on = [ "i" ],      run = """ shell --block -- bat --paging always --wrap never "$@"  """, for = "unix",    desc = "Bat open selected" },
	{ on = [ "i" ],      run = """ shell --block -- bat --paging always --wrap never  %*   """, for = "windows", desc = "Bat open selected" },

  # Shell
	{ on = [ "s", "c" ], run = """ shell ' code "$@"                                                     '         """, for = "unix",    desc = "vscode" },
	{ on = [ "s", "c" ], run = """ shell ' code  %*                                                      '         """, for = "windows", desc = "vscode" },
	{ on = [ "s", "C" ], run = """ shell ' google-chrome "$@" || google-chrome-stable "$@"               '         """, for = "unix",    desc = "chrome (to drag and drop)" }, # or copy file path into the browser to drag and drop from download icon (images are draggable, some files you need right-click to download)
	{ on = [ "s", "C" ], run = """ shell ' chrome  %*                                                    '         """, for = "windows", desc = "chrome (to drag and drop)" }, # or copy file path into the browser to drag and drop from download icon (images are draggable, some files you need right-click to download)
	{ on = [ "s", "D" ], run = """ search fd                                                                       """,                  desc = "fd search" },
	{ on = [ "s", "l" ], run = """ shell ' lazygit                                                       ' --block """,                  desc = "lazygit" },
	{ on = [ "s", "n" ], run = """ shell ' nvim "$@"                                                     ' --block """, for = "unix",    desc = "neovim" },    # opens all selections
	{ on = [ "s", "n" ], run = """ shell ' nvim  %*                                                      ' --block """, for = "windows", desc = "neovim" },    # opens all selections
  { on = [ "s", "p" ], run = """ shell ' $SWALLOWER zathura --config-dir="$ZATHURARC" "$@" &           '         """, for = "unix",    desc = "zathura" },   # linux only, hyprland has builtin togglespecialworkspace alternative for $SWALLOWER
	{ on = [ "s", "s" ], run = """ shell ' zsh                                                           ' --block """, for = "unix",    desc = "zsh" },
	{ on = [ "s", "s" ], run = """ shell ' set "HOME=/c/Users/%USERNAME%" && msys2 -full-path -shell zsh ' --block """, for = "windows", desc = "msys2 zsh" },
	{ on = [ "s", "v" ], run = """ shell ' $SWALLOWER mpv "$@" >/dev/null 2>&1 & disown                  ' --block """, for = "unix",    desc = "mpv" },       # `_` key to minimize for music videos, hyprland has builtin togglespecialworkspace alternative for $SWALLOWER
	{ on = [ "s", "V" ], run = """ shell ' mpv --vo=sixel "$@"                                           ' --block """, for = "unix",    desc = "mpv sixel" }, # https://github.com/occivink/mpv-gallery-view for grid image viewer
	{ on = [ "s", "v" ], run = """ shell ' mpv %*                                                        '         """, for = "windows", desc = "mpv" },       # `_` key to minimize for music videos
	{ on = [ "s", "x" ], run = """ shell ' $SWALLOWER xdg-open "$1" & disown                             ' --block """, for = "unix",    desc = "xdg-open" },  # linux only, hyprland has builtin togglespecialworkspace alternative for $SWALLOWER
	{ on = [ "s", "z" ], run = """ shell ' 7z a -tzip $1.zip "$@"                                        '         """, for = "unix",    desc = "7zip selection" },
	{ on = [ "s", "z" ], run = """ shell ' 7z a -tzip %1.zip  %*                                         '         """, for = "windows", desc = "7zip selection" },

  # Plugins
	{ on = [ "l" ], run = "plugin smart-enter",      desc = "open directory or file" },
	{ on = [ "<Enter>" ], run = "plugin smart-enter",      desc = "open directory or file" },
	{ on = [ "m" ], run = "plugin bookmarks save",   desc = "bookmark create" },
	{ on = [ "'" ], run = "plugin bookmarks jump",   desc = "bookmark jump" },
	{ on = [ '"' ], run = "plugin bookmarks delete", desc = "bookmark delete" },
]

[[mgr.append_keymap]]
on = [ "s", "e" ]
run = '''
  shell
  --block
  -- eval "${EDITOR:-nvim -u NORC --cmd 'lua vim.cmd.source(vim.env.RETRONVIM_PATH .. [[/nvim/init.lua]])'}" "$@"
'''
for = "unix"
desc = "$EDITOR" # open selected with $EDITOR

[[mgr.append_keymap]]
on = [ "s", "e" ]
run = '''
  shell
  --block
  -- %EDITOR% %* 2>nul || nvim -u NORC --cmd "lua vim.cmd.source(vim.env.RETRONVIM_PATH .. [[/nvim/init.lua]])" %*
'''
for = "windows"
desc = "$EDITOR" # opens selected with $EDITOR

[[mgr.append_keymap]]
on = [ "s", "f" ]
run = '''
  shell
  --block
  -- nvim -c "lua Snacks.picker.files()"
'''
desc = "neovim fzf"

[[mgr.append_keymap]]
on = [ "s", "g" ]
run = '''
  shell
  --block
  -- nvim -c "lua Snacks.picker.grep { layout = 'ivy_split'} "
'''
desc = "neovim ripgrep"

[[mgr.append_keymap]]
on = [ "s", "r" ]
run = '''
  shell
  --block
  -- rg "" --color=always --line-number | fzf --ansi --delimiter : --preview "bat --color=always {1} --highlight-line {2}" --preview-window "up,60%,+{2},nohidden" --bind "enter:become(ya emit reveal {1} && nvim {1} +{2})"
'''
desc = "rg fzf (󰘶 ↓ scrolls)"

[[mgr.append_keymap]]
on = [ "s", "S" ]
run = '''
  shell
  --block
  -- bash -c 'y() { yazi --cwd-file=$HOME/.yazi; cd \"$(cat $HOME/.yazi)\"; }; export -f y; stty echo; bash -o vi'
'''
desc = "bash"

[[mgr.append_keymap]]
on = [ "s", "w" ]
run = '''
  shell
  --block
  -- powershell -noexit -c "set-psreadlineoption -editmode vi; function y() { yazi $PWD --cwd-file=$HOME/.yazi; cd $(cat $HOME/.yazi); };"
'''
for = "windows"
desc = "powershell"
