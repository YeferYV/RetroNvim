{
  "name": "retronvim",
  "displayName": "RetroNvim",
  "description": "neovim text objects + LSP whichkey + touchcursor keyboard layout + minimal zsh/yazi/nvim/powershell setup",
  "icon": "assets/retronvim-logo.png",
  "publisher": "YeferYV",
  "author": {
    "name": "YeferYV",
    "url": "https://github.com/YeferYV"
  },
  "version": "0.4.0",
  "engines": {
    "vscode": "^1.85.0"
  },
  "activationEvents": [
    "*"
  ],
  "main": "./extension.js",
  "categories": [
    "Keymaps",
    "Themes"
  ],
  "keywords": [
    "vim",
    "neovim",
    "astronvim",
    "lazyvim",
    "lunarvim",
    "mini.nvim",
    "nvchad",
    "retronvim",
    "text objects",
    "LSP",
    "whichkey",
    "touchcursor",
    "keyboard layout",
    "kanata",
    "Kmonad",
    "QMK",
    "yazi",
    "zsh",
    "msys2",
    "base16",
    "powershell"
  ],
  "homepage": "https://marketplace.visualstudio.com/items?itemName=YeferYV.RetroNvim",
  "repository": {
    "type": "git",
    "url": "https://github.com/YeferYV/RetroNvim"
  },
  "bugs": {
    "url": "https://github.com/YeferYV/RetroNvim/issues"
  },
  "contributes": {
    "themes": [
      {
        "label": "retronvim_base16",
        "uiTheme": "vs-dark",
        "path": "./themes/retronvim_base16.json"
      }
    ],
    "configurationDefaults": {
      "accessibility.accessibleView.closeOnKeyPress": false,
      "cursor.cpp.enablePartialAccepts": true,
      "editor.accessibilitySupport": "off",
      "editor.autoClosingBrackets": "beforeWhitespace",
      "editor.autoClosingComments": "beforeWhitespace",
      "editor.autoClosingQuotes": "beforeWhitespace",
      "editor.codeActionsOnSave": {
        "source.addMissingImports": "always"
      },
      "editor.fontFamily": "'FiraCode Nerd Font', Menlo, Monaco, 'Courier New', monospace",
      "editor.fontLigatures": true,
      "editor.minimap.enabled": false,
      "editor.quickSuggestions": {
        "strings": "on"
      },
      "editor.renderLineHighlight": "none",
      "editor.renderWhitespace": "none",
      "editor.suggest.insertMode": "replace",
      "editor.suggest.selectionMode": "never",
      "editor.stickyScroll.enabled": false,
      "editor.tabSize": 2,
      "emmet.includeLanguages": {
        "javascript": "javascriptreact",
        "typescript": "typescriptreact"
      },
      "diffEditor.maxComputationTime": 0,
      "files.trimTrailingWhitespace": true,
      "files.exclude": {
        "**/node_modules": true
      },
      "geminicodeassist.inlineSuggestions.nextEditPredictions": true,
      "geminicodeassist.inlineSuggestions.suggestionSpeed": "Fast",
      "git.autofetch": true,
      "git.mergeEditor": true,
      "github.copilot.nextEditSuggestions.enabled": true,
      "json.format.keepLines": true,
      "multiDiffEditor.experimental.enabled": true,
      "scm.defaultViewMode": "tree",
      "tailwindCSS.emmetCompletions": true,
      "tailwindCSS.includeLanguages": {
        "javascript": "javascript",
        "typescript": "typescript"
      },
      "terminal.integrated.commandsToSkipShell": [
        "whichkey.show",
        "workbench.action.openEditorAtIndex1",
        "workbench.action.openEditorAtIndex2",
        "workbench.action.openEditorAtIndex3",
        "workbench.action.openEditorAtIndex4",
        "workbench.action.openEditorAtIndex5",
        "workbench.action.openEditorAtIndex6",
        "workbench.action.openEditorAtIndex7",
        "workbench.action.openEditorAtIndex8",
        "workbench.action.openEditorAtIndex9"
      ],
      "terminal.integrated.enableImages": true,
      "terminal.integrated.minimumContrastRatio": 1,
      "terminal.integrated.scrollback": 10000,
      "terminal.integrated.suggest.enabled": true,
      "terminal.integrated.profiles.osx": {
        "zsh (retronvim)": {
          "path": "zsh",
          "args": [
            "-c",
            "export ZDOTDIR=\"$(ls -d $HOME/.*/extensions/yeferyv.retronvim*/zsh | head -n1)\"; zsh"
          ]
        }
      },
      "terminal.integrated.profiles.linux": {
        "zsh (retronvim)": {
          "path": "bash",
          "args": [
            "-c",
            "export ZDOTDIR=\"$(echo ~/.*/extensions/yeferyv.retronvim*/zsh | cut -d' ' -f1)\"; $ZDOTDIR/../bin/env/bin/zsh"
          ]
        }
      },
      "terminal.integrated.profiles.windows": {
        "zsh (MSYS2)": {
          "path": "msys2.cmd",
          "args": [
            "-full-path",
            "-shell",
            "zsh",
            "-c",
            "export HOME=/c/Users/$USER; export ZDOTDIR=$(printf ~/.*/extensions/yeferyv.retronvim*/zsh | head -n1); zsh -l"
          ]
        },
        "powershell (retronvim)": {
          "path": "powershell",
          "args": [
            "-executionpolicy",
            "bypass",
            "-c",
            "$env:retronvim_path=(Get-ChildItem -Path \"$HOME/.*/extensions/yeferyv.retronvim*\" | Select-Object -First 1).FullName; $env:psmodulepath=\"$env:retronvim_path/powershell/modules;$env:psmodulepath\"; powershell -nologo -noexit -file \"$env:retronvim_path/powershell/profile.ps1\""
          ]
        }
      },
      "terminal.integrated.defaultProfile.osx": "zsh (retronvim)",
      "terminal.integrated.defaultProfile.linux": "zsh (retronvim)",
      "terminal.integrated.defaultProfile.windows": "powershell (retronvim)",
      "trae.chatLanguage": "en",
      "vim.camelCaseMotion.enable": true,
      "vim.flash.enable": true,
      "vim.foldfix": true,
      "vim.hlsearch": true,
      "vim.highlightedyank.enable": true,
      "vim.useSystemClipboard": true,
      "vim.visualstar": true,
      "vim.insertModeKeyBindings": [
        {
          "before": [
            "j",
            "k"
          ],
          "after": [
            "<Esc>"
          ]
        },
        {
          "before": [
            "k",
            "j"
          ],
          "after": [
            "<Esc>"
          ]
        }
      ],
      "vim.visualModeKeyBindingsNonRecursive": [
        {
          "before": [
            "p"
          ],
          "after": [
            "p",
            "g",
            "v",
            "y"
          ]
        },
        {
          "before": [
            "Y"
          ],
          "after": [
            "g",
            "_",
            "y"
          ]
        }
      ],
      "vim.normalModeKeyBindingsNonRecursive": [
        {
          "before": [
            "<space>",
            "o"
          ],
          "commands": [
            "workbench.files.action.focusFilesExplorer"
          ]
        },
        {
          "before": [
            "<esc>"
          ],
          "commands": [
            ":noh"
          ]
        },
        {
          "before": [
            "<S-q>"
          ],
          "commands": [
            ":q"
          ]
        },
        {
          "before": [
            "<S-r>"
          ],
          "commands": [
            "editor.action.format",
            ":w"
          ]
        },
        {
          "before": [
            "J"
          ],
          "after": [
            "1",
            "0",
            "j"
          ]
        },
        {
          "before": [
            "K"
          ],
          "after": [
            "1",
            "0",
            "k"
          ]
        },
        {
          "before": [
            "H"
          ],
          "after": [
            "1",
            "0",
            "h"
          ]
        },
        {
          "before": [
            "L"
          ],
          "after": [
            "1",
            "0",
            "l"
          ]
        },
        {
          "before": [
            "Y"
          ],
          "after": [
            "y",
            "g",
            "_"
          ]
        }
      ],
      "vim.leader": "<space>",
      "vim.handleKeys": {
        "<C-b>": false,
        "<C-f>": false,
        "<C-g>": false,
        "<C-h>": false,
        "<C-j>": false,
        "<C-k>": false,
        "<C-l>": false,
        "<C-m>": false,
        "<C-n>": false,
        "<C-p>": false,
        "<C-q>": false,
        "<C-s>": false,
        "<C-t>": false,
        "<C-z>": false,
        "<C-space>": false
      },
      "vscode-neovim.compositeKeys": {
        "jk": {
          "command": "vscode-neovim.escape"
        },
        "kj": {
          "command": "vscode-neovim.escape"
        }
      },
      "vscode-neovim.ctrlKeysForInsertMode": [],
      "vscode-neovim.ctrlKeysForNormalMode": [
        "a",
        "c",
        "d",
        "e",
        "i",
        "o",
        "r",
        "u",
        "v",
        "w",
        "x",
        "y",
        "/"
      ],
      "zenMode.centerLayout": false,
      "zenMode.fullScreen": false,
      "zenMode.hideLineNumbers": false,
      "workbench.colorTheme": "retronvim_base16",
      "workbench.iconTheme": "symbols",
      "workbench.colorCustomizations": {
        "[retronvim_base16][Tokyo Night Dark][Poimandres Alternate]": {
          "editorGroup.border": "#25252566",
          "editorSuggestWidget.selectedBackground": "#2c2c2c",
          "panel.border": "#25252566",
          "terminal.border": "#25252566",
          "terminal.ansiBlack": "#3c3c3c",
          "terminal.ansiRed": "#ff0000",
          "terminal.ansiGreen": "#009900",
          "terminal.ansiYellow": "#999900",
          "terminal.ansiBlue": "#5555cc",
          "terminal.ansiMagenta": "#8855ff",
          "terminal.ansiCyan": "#5FB3A1",
          "terminal.ansiWhite": "#a0a0a0",
          "terminal.ansiBrightBlack": "#6c6c6c",
          "terminal.ansiBrightRed": "#ff0000",
          "terminal.ansiBrightGreen": "#00ff00",
          "terminal.ansiBrightYellow": "#ffff00",
          "terminal.ansiBrightBlue": "#1c1cff",
          "terminal.ansiBrightMagenta": "#8844bb",
          "terminal.ansiBrightCyan": "#5DE4C7",
          "terminal.ansiBrightWhite": "#ffffff"
        }
      },
      "whichkey.bindings": [
        {
          "key": ";",
          "name": "Repeat Which-key",
          "command": "whichkey.repeatMostRecent"
        },
        {
          "key": "/",
          "name": "Fuzzy find Wich-key",
          "command": "whichkey.searchBindings"
        },
        {
          "key": "b",
          "name": "+Buffers (Editors/Tabs)",
          "bindings": [
            {
              "key": ";",
              "name": "Recent editor",
              "commands": [
                "workbench.action.quickOpenPreviousRecentlyUsedEditor",
                "workbench.action.acceptSelectedQuickOpenItem"
              ]
            },
            {
              "key": "b",
              "name": "Find editors",
              "command": "workbench.action.showAllEditors"
            },
            {
              "key": "B",
              "name": "Recent editors",
              "command": "workbench.action.quickOpenPreviousRecentlyUsedEditor"
            },
            {
              "key": "c",
              "name": "force close editor",
              "command": "workbench.action.revertAndCloseActiveEditor"
            },
            {
              "key": "C",
              "name": "Close other editors",
              "command": "workbench.action.closeOtherEditors"
            },
            {
              "key": "s",
              "name": "Previous editor",
              "command": "workbench.action.previousEditor"
            },
            {
              "key": "f",
              "name": "Next editor",
              "command": "workbench.action.nextEditor"
            },
            {
              "key": "S",
              "name": "Move editor left in group",
              "command": "workbench.action.moveEditorLeftInGroup"
            },
            {
              "key": "F",
              "name": "Move editor right in group",
              "command": "workbench.action.moveEditorRightInGroup"
            },
            {
              "key": "h",
              "name": "Move editor into left group",
              "command": "workbench.action.moveEditorToLeftGroup"
            },
            {
              "key": "j",
              "name": "Move editor into below group",
              "command": "workbench.action.moveEditorToBelowGroup"
            },
            {
              "key": "k",
              "name": "Move editor into above group",
              "command": "workbench.action.moveEditorToAboveGroup"
            },
            {
              "key": "l",
              "name": "Move editor into right group",
              "command": "workbench.action.moveEditorToRightGroup"
            },
            {
              "key": "t",
              "name": "New untitled editor",
              "command": "workbench.action.files.newUntitledFile"
            },
            {
              "key": "x",
              "name": "Close active editor",
              "command": "workbench.action.closeActiveEditor"
            },
            {
              "key": "X",
              "name": "Reopen closed editor",
              "command": "workbench.action.reopenClosedEditor"
            }
          ]
        },
        {
          "key": "d",
          "name": "+Debug",
          "bindings": [
            {
              "key": "b",
              "name": "Toggle breakpoint",
              "command": "editor.debug.action.toggleBreakpoint"
            },
            {
              "key": "B",
              "name": "Toggle inline breakpoint",
              "command": "editor.debug.action.toggleInlineBreakpoint"
            },
            {
              "key": "c",
              "name": "Continue debug",
              "command": "workbench.action.debug.continue"
            },
            {
              "key": "i",
              "name": "Step into",
              "command": "workbench.action.debug.stepInto"
            },
            {
              "key": "j",
              "name": "Jump to cursor",
              "command": "debug.jumpToCursor"
            },
            {
              "key": "o",
              "name": "Step over",
              "command": "workbench.action.debug.stepOver"
            },
            {
              "key": "O",
              "name": "Step out",
              "command": "workbench.action.debug.stepOut"
            },
            {
              "key": "p",
              "name": "Pause debug",
              "command": "workbench.action.debug.pause"
            },
            {
              "key": "q",
              "name": "Quokka start",
              "command": "quokka.makeQuokkaFromExistingFile"
            },
            {
              "key": "Q",
              "name": "Quokka stop",
              "commands": [
                "quokka.stopAll",
                "workbench.action.toggleAuxiliaryBar"
              ]
            },
            {
              "key": "r",
              "name": "Restart debug",
              "command": "workbench.action.debug.restart"
            },
            {
              "key": "R",
              "name": "Run without debugging",
              "command": "workbench.action.debug.run"
            },
            {
              "key": "s",
              "name": "Start debug",
              "command": "workbench.action.debug.start"
            },
            {
              "key": "S",
              "name": "Stop debug",
              "command": "workbench.action.debug.stop"
            },
            {
              "key": "t",
              "name": "Toggle REPL",
              "command": "workbench.debug.action.toggleRepl"
            },
            {
              "key": "T",
              "name": "Toggle quokka",
              "command": "quokka.toggle"
            },
            {
              "key": "v",
              "name": "Focus on watch window",
              "command": "workbench.debug.action.focusWatchView"
            },
            {
              "key": "V",
              "name": "Add to watch",
              "command": "editor.debug.action.selectionToWatch"
            }
          ]
        },
        {
          "key": "e",
          "name": "Toggle Explorer",
          "type": "conditional",
          "bindings": [
            {
              "key": "",
              "name": "View explorer",
              "command": "workbench.view.explorer"
            },
            {
              "key": "when:sideBarVisible && explorerViewletVisible",
              "name": "Hide explorer",
              "command": "workbench.action.toggleSidebarVisibility"
            }
          ]
        },
        {
          "key": "E",
          "name": "+Emmet (insert mode only)",
          "bindings": [
            {
              "key": "a",
              "name": "select outward item",
              "command": "editor.emmet.action.balanceOut"
            },
            {
              "key": "i",
              "name": "select inward item",
              "command": "editor.emmet.action.balanceIn"
            },
            {
              "key": "n",
              "name": "select next item",
              "command": "editor.emmet.action.selectNextItem"
            },
            {
              "key": "p",
              "name": "select prev item",
              "command": "editor.emmet.action.selectPrevItem"
            }
          ]
        },
        {
          "key": "f",
          "name": "Find File",
          "command": "workbench.action.quickOpen"
        },
        {
          "key": "g",
          "name": "+Git",
          "bindings": [
            {
              "key": "a",
              "name": "Commit All (Amend)",
              "command": "git.commitAllAmend"
            },
            {
              "key": "A",
              "name": "Commit Staged (Amend)",
              "command": "git.commitStagedAmend"
            },
            {
              "key": "b",
              "name": "Checkout Branch",
              "command": "git.checkout"
            },
            {
              "key": "B",
              "name": "Create Branch From",
              "command": "git.branchFrom"
            },
            {
              "key": "c",
              "name": "Commit All Changes",
              "command": "git.commitAll"
            },
            {
              "key": "C",
              "name": "Commit Staged Changes",
              "command": "git.commit"
            },
            {
              "key": "d",
              "name": "Discard Changes of current file",
              "command": "git.clean"
            },
            {
              "key": "D",
              "name": "Delete Branch",
              "command": "git.deleteBranch"
            },
            {
              "key": "f",
              "name": "Fetch",
              "command": "git.fetch"
            },
            {
              "key": "F",
              "name": "Pull From",
              "command": "git.pullFrom"
            },
            {
              "key": "g",
              "name": "Lazygit",
              "command": "runCommands",
              "args": {
                "commands": [
                  {
                    "command": "workbench.action.createTerminalEditor"
                  },
                  {
                    "command": "workbench.action.terminal.sendSequence",
                    "args": [
                      {
                        "text": "lazygit; exit\n"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "key": "j",
              "name": "Next Change",
              "command": "workbench.action.editor.nextChange"
            },
            {
              "key": "k",
              "name": "Previous Change",
              "command": "workbench.action.editor.previousChange"
            },
            {
              "key": "J",
              "name": "Preview Next Hunk",
              "command": "editor.action.dirtydiff.next"
            },
            {
              "key": "K",
              "name": "Preview Previous Hunk",
              "command": "editor.action.dirtydiff.previous"
            },
            {
              "key": "o",
              "name": "Open Diff (file changes)",
              "command": "git.openChange"
            },
            {
              "key": "r",
              "name": "Reset hunk",
              "command": "git.revertSelectedRanges"
            },
            {
              "key": "s",
              "name": "Stage current file",
              "command": "git.stage"
            },
            {
              "key": "S",
              "name": "Stage selected range",
              "command": "git.stageSelectedRanges"
            },
            {
              "key": "u",
              "name": "Unstage current file",
              "command": "git.unstage"
            },
            {
              "key": "U",
              "name": "Unstage selected range",
              "command": "git.unstageSelectedRanges"
            },
            {
              "key": "v",
              "name": "View Source Control",
              "command": "workbench.view.scm"
            },
            {
              "key": "V",
              "name": "View All Changes",
              "command": "git.viewChanges"
            },
            {
              "key": "w",
              "name": "Toggle Diff view",
              "command": "toggle.diff.renderSideBySide"
            },
            {
              "key": "<",
              "name": "Pull",
              "command": "git.pull"
            },
            {
              "key": ">",
              "name": "Push",
              "command": "git.push"
            },
            {
              "key": "?",
              "name": "show lazygit keybindings (when inside lazygit)",
              "command": "workbench.action.terminal.sendSequence",
              "args": {
                "text": "?"
              }
            }
          ]
        },
        {
          "key": "i",
          "name": "+Install Dependencies",
          "bindings": [
            {
              "key": "b",
              "name": "install brew karabiner ffmpeg poppler wezterm (MacOS)",
              "commands": [
                "workbench.action.terminal.newWithProfile",
                "workbench.action.terminal.sendSequence",
                "workbench.action.terminal.sendSequence",
                "workbench.action.terminal.sendSequence",
                "workbench.action.terminal.sendSequence",
                "workbench.action.terminal.sendSequence"
              ],
              "args": [
                {
                  "profileName": "zsh"
                },
                {
                  "text": "NONINTERACTIVE=1 /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" \n"
                },
                {
                  "text": "# how to uninstall: https://github.com/Homebrew/install \n"
                },
                {
                  "text": "source ${ZDOTDIR:-~}/.zshrc \n"
                },
                {
                  "text": "brew install --cask karabiner-elements wezterm \n"
                },
                {
                  "text": "pixi global install ffmpeg poppler; # yazi's preview \n"
                }
              ]
            },
            {
              "key": "n",
              "name": "install nix-env devour ffmpeg poppler wezterm zathura (Linux)",
              "commands": [
                "workbench.action.createTerminalEditor",
                "workbench.action.terminal.sendSequence",
                "workbench.action.terminal.sendSequence",
                "workbench.action.terminal.sendSequence",
                "workbench.action.terminal.sendSequence",
                "workbench.action.terminal.sendSequence"
              ],
              "args": [
                null,
                {
                  "text": "yes | sh <(curl -L https://nixos.org/nix/install) --daemon \n"
                },
                {
                  "text": "# https://nix.dev/manual/nix/2.28/installation/uninstall \n"
                },
                {
                  "text": "bash -i -c \"nix-env -iA nixpkgs.devour nixpkgs.zathura \"; \n"
                },
                {
                  "text": "curl -C- -o ~/.pixi/bin/wezterm -L https://github.com/wezterm/wezterm/releases/download/20240203-110809-5046fc22/WezTerm-20240203-110809-5046fc22-Ubuntu20.04.AppImage && chmod +x ~/.pixi/bin/wezterm \n"
                },
                {
                  "text": "pixi global install ffmpeg poppler; # yazi's preview \n"
                }
              ]
            },
            {
              "key": "s",
              "name": "install scoop zsh ffmpeg poppler wezterm (Windows)",
              "commands": [
                "workbench.action.terminal.newWithProfile",
                "workbench.action.terminal.sendSequence",
                "workbench.action.terminal.sendSequence",
                "workbench.action.terminal.sendSequence",
                "workbench.action.terminal.sendSequence"
              ],
              "args": [
                {
                  "profileName": "powershell (retronvim)"
                },
                {
                  "text": "Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope CurrentUser; iwr get.scoop.sh | iex \n"
                },
                {
                  "text": "scoop bucket add extras; scoop install msys2 wezterm \n"
                },
                {
                  "text": "msys2 -c 'pacman -S --noconfirm zsh' \n"
                },
                {
                  "text": "pixi global install ffmpeg poppler; # yazi's preview \n"
                }
              ]
            },
            {
              "key": "R",
              "name": "restart retronvim (required after installing brew nix-env scoop) (windows needs to relaunch vscode)",
              "commands": [
                "workbench.panel.output.focus",
                "workbench.action.reloadWindow"
              ]
            },
            {
              "key": "i",
              "name": "Increase keyboard repeat rate (Windows)",
              "commands": [
                "workbench.action.createTerminalEditor",
                "workbench.action.terminal.sendSequence",
                "workbench.action.terminal.sendSequence",
                "workbench.action.terminal.sendSequence",
                "workbench.action.terminal.sendSequence"
              ],
              "args": [
                null,
                {
                  "text": "powershell -c \"set-itemproperty 'HKCU:/Control Panel/Accessibility/Keyboard Response' AutoRepeatDelay 210     \" \n"
                },
                {
                  "text": "powershell -c \"set-itemproperty 'HKCU:/Control Panel/Accessibility/Keyboard Response' AutoRepeatRate 7        \" \n"
                },
                {
                  "text": "powershell -c \"set-itemproperty 'HKCU:/Control Panel/Accessibility/Keyboard Response' DelayBeforeAcceptance 0 \" \n"
                },
                {
                  "text": "powershell -c \"set-itemproperty 'HKCU:/Control Panel/Accessibility/Keyboard Response' Flags 27                \" \n"
                }
              ]
            },
            {
              "key": "I",
              "name": "Increase keyboard repeat rate (MacOS) ",
              "commands": [
                "workbench.action.createTerminalEditor",
                "workbench.action.terminal.sendSequence"
              ],
              "args": [
                null,
                {
                  "text": "defaults write -g InitialKeyRepeat -int 10 && defaults write -g KeyRepeat -int 1 \n"
                }
              ]
            },
            {
              "key": "k",
              "name": "Start touchcursor keyboard layout on Windows 10/11 (LeftCtrl + Space + Escape to stop)",
              "commands": [
                "workbench.action.terminal.newWithProfile",
                "workbench.action.terminal.sendSequence"
              ],
              "args": [
                {
                  "profileName": "powershell (retronvim)"
                },
                {
                  "text": "Set-WinUserLanguageList -force en-US,es-US; conhost --headless kanata --cfg %RETRONVIM_PATH%/kanata/simple.kbd; sleep 2; exit; \r"
                }
              ]
            },
            {
              "key": "K",
              "name": "Start touchcursor keyboard layout on Linux/MacOS (LeftCtrl + Space + Escape to stop)",
              "commands": [
                "workbench.action.terminal.newWithProfile",
                "workbench.action.terminal.sendSequence"
              ],
              "args": [
                {
                  "profileName": "zsh (retronvim)"
                },
                {
                  "text": "sudo --preserve-env bash --login -c '$RETRONVIM_PATH/bin/env/bin/kanata --cfg $RETRONVIM_PATH/kanata/simple.kbd &'; sleep 5; exit; \r"
                }
              ]
            },
            {
              "key": "y",
              "name": "Install RetroNvim's nvim/yazi/zsh/powershell on any terminal (Windows 10/11)",
              "commands": [
                "workbench.action.terminal.newWithProfile",
                "workbench.action.terminal.sendSequence",
                "workbench.action.terminal.sendSequence",
                "workbench.action.terminal.sendSequence",
                "workbench.action.terminal.sendSequence",
                "workbench.action.terminal.sendSequence",
                "workbench.action.terminal.sendSequence"
              ],
              "args": [
                {
                  "profileName": "powershell (retronvim)"
                },
                {
                  "text": "set-executionpolicy bypass -scope currentuser                                                                                        \n"
                },
                {
                  "text": "cp -r $env:RETRONVIM_PATH/powershell                $HOME/documents/windowspowershell                                                \n"
                },
                {
                  "text": "cp    $env:RETRONVIM_PATH/zsh/.zshrc                $HOME/.zshrc                                                                     \n"
                },
                {
                  "text": "cp    $env:RETRONVIM_PATH/powershell/settings.json  $HOME/appdata/local/Packages/Microsoft.WindowsTerminal_8wekyb3d8bbwe/LocalState/ \n"
                },
                {
                  "text": "mkdir -p $HOME/.config/wezterm; cp $env:RETRONVIM_PATH/zsh/wezterm.lua $HOME/.config/wezterm                                         \n"
                },
                {
                  "text": "cp    $env:RETRONVIM_PATH/assets/retronvim.jpg      $HOME/documents/windowspowershell/                                               \n"
                }
              ]
            },
            {
              "key": "Y",
              "name": "Install RetroNvim's nvim/yazi/zsh on any terminal (Linux/MacOS)",
              "commands": [
                "workbench.action.terminal.newWithProfile",
                "workbench.action.terminal.sendSequence",
                "workbench.action.terminal.sendSequence",
                "workbench.action.terminal.sendSequence",
                "workbench.action.terminal.sendSequence"
              ],
              "args": [
                {
                  "profileName": "zsh (retronvim)"
                },
                {
                  "text": "cp --verbose $RETRONVIM_PATH/zsh/.zshrc ~/.zshrc  \n"
                },
                {
                  "text": "mkdir -p ~/.config/wezterm && cp --verbose $RETRONVIM_PATH/zsh/wezterm.lua ~/.config/wezterm  \n"
                },
                {
                  "text": "# sudo ln -s $RETRONVIM_PATH/bin/env/bin/zsh /bin/zsh \n"
                },
                {
                  "text": "# chsh --shell /bin/zsh $USER \n"
                }
              ]
            }
          ]
        },
        {
          "key": "I",
          "name": "+Install Programming languages (vscode-extension included)",
          "bindings": [
            {
              "key": "a",
              "name": "angular (javascript)",
              "commands": [
                "workbench.action.createTerminalEditor",
                "workbench.action.terminal.sendSequence",
                "workbench.action.terminal.sendSequence",
                "workbench.action.createTerminalEditor",
                "workbench.action.terminal.sendSequence"
              ],
              "args": [
                null,
                {
                  "text": "pixi global install angular-cli \n"
                },
                {
                  "text": "# pnpm create vite \n pixi exec curl cht.sh/ng \n"
                },
                null,
                {
                  "text": "code --install-extension loiane.angular-extension-pack \n"
                }
              ]
            },
            {
              "key": "A",
              "name": "astro (javascript)",
              "commands": [
                "workbench.action.createTerminalEditor",
                "workbench.action.terminal.sendSequence"
              ],
              "args": [
                null,
                {
                  "text": "code --install-extension astro-build.astro-vscode; # pnpm create astro \n"
                }
              ]
            },
            {
              "key": "c",
              "name": "c/c++",
              "commands": [
                "workbench.action.createTerminalEditor",
                "workbench.action.terminal.sendSequence",
                "workbench.action.terminal.sendSequence",
                "workbench.action.createTerminalEditor",
                "workbench.action.terminal.sendSequence"
              ],
              "args": [
                null,
                {
                  "text": "pixi global install cmake cxx-compiler --environment cxx-compiler --expose gcc --expose g++ --expose cmake \n"
                },
                {
                  "text": "pixi exec curl cht.sh/g++ \n"
                },
                null,
                {
                  "text": "code --install-extension ms-vscode.cpptools-extension-pack \n"
                }
              ]
            },
            {
              "key": "C",
              "name": "c#",
              "commands": [
                "workbench.action.createTerminalEditor",
                "workbench.action.terminal.sendSequence",
                "workbench.action.terminal.sendSequence",
                "workbench.action.createTerminalEditor",
                "workbench.action.terminal.sendSequence"
              ],
              "args": [
                null,
                {
                  "text": "pixi global install dotnet-sdk --expose dotnet \n"
                },
                {
                  "text": "pixi exec curl cht.sh/dotnet \n"
                },
                null,
                {
                  "text": "code --install-extension ms-dotnettools.csdevkit \n"
                }
              ]
            },
            {
              "key": "d",
              "name": "docker",
              "commands": [
                "workbench.action.createTerminalEditor",
                "workbench.action.terminal.sendSequence",
                "workbench.action.terminal.sendSequence",
                "workbench.action.terminal.sendSequence",
                "workbench.action.terminal.sendSequence",
                "workbench.action.createTerminalEditor",
                "workbench.action.terminal.sendSequence"
              ],
              "args": [
                null,
                {
                  "text": "pixi exec shell -c 'brew install --cask docker          2>/dev/null' \n"
                },
                {
                  "text": "pixi exec shell -c 'nix-env -iA nixpkgs.docker          2>/dev/null' \n"
                },
                {
                  "text": "pixi exec shell -c 'winget install docker.dockerdesktop 2>/dev/null' \n"
                },
                {
                  "text": "pixi exec curl cht.sh/docker \n"
                },
                null,
                {
                  "text": "code --install-extension ms-azuretools.vscode-docker \n"
                }
              ]
            },
            {
              "key": "F",
              "name": "FigmaToCode and AutoHTML (installer link) ",
              "commands": [
                "vscode.open",
                "vscode.open"
              ],
              "args": [
                "https://www.figma.com/community/plugin/842128343887142055/figma-to-code-html-tailwind-flutter-swiftui",
                "https://www.figma.com/community/plugin/1077172952654000760/autohtml-components-to-code"
              ]
            },
            {
              "key": "g",
              "name": "go",
              "commands": [
                "workbench.action.createTerminalEditor",
                "workbench.action.terminal.sendSequence",
                "workbench.action.terminal.sendSequence",
                "workbench.action.createTerminalEditor",
                "workbench.action.terminal.sendSequence"
              ],
              "args": [
                null,
                {
                  "text": "pixi global install go \n"
                },
                {
                  "text": "pixi curl cht.sh/go \n"
                },
                null,
                {
                  "text": "code --install-extension golang.Go \n"
                }
              ]
            },
            {
              "key": "j",
              "name": "javascript",
              "commands": [
                "workbench.action.createTerminalEditor",
                "workbench.action.terminal.sendSequence",
                "workbench.action.terminal.sendSequence",
                "workbench.action.terminal.sendSequence",
                "workbench.action.terminal.sendSequence",
                "workbench.action.terminal.sendSequence",
                "workbench.action.createTerminalEditor",
                "workbench.action.terminal.sendSequence",
                "workbench.action.terminal.sendSequence",
                "workbench.action.terminal.sendSequence",
                "workbench.action.terminal.sendSequence"
              ],
              "args": [
                null,
                {
                  "text": "pixi global install nodejs pnpm \n"
                },
                {
                  "text": "pixi exec curl cht.sh/node \n"
                },
                {
                  "text": "pixi exec curl cht.sh/pnpm \n"
                },
                {
                  "text": "# pnpm create next-app --example prisma-postgres \n"
                },
                {
                  "text": "# pnpm create expo-app --example with-nextjs \n"
                },
                null,
                {
                  "text": "code --install-extension WallabyJs.console-ninja  --install-extension bradlc.vscode-tailwindcss         --install-extension esbenp.prettier-vscode                         --install-extension prisma.prisma             \n"
                },
                {
                  "text": "code --install-extension emranweb.daisyui-snippet --install-extension imgildev.vscode-nextjs-generator  --install-extension supabase-snippets.supabase-javascript-snippets --install-extension SohanEmon.firebase-wizard \n"
                },
                {
                  "text": "code --install-extension a-smiggle.chills         --install-extension formulahendry.auto-rename-tag     --install-extension rangav.vscode-thunder-client                   --install-extension usernamehw.errorlens      \n"
                },
                {
                  "text": "code --install-extension PayPal.vscode-paypal     --install-extension chris-noring.graphql-snippets     --install-extension amjarmed.100-nextjs-snippets                   --install-extension ImKKingshuk.xsnippets     \n"
                }
              ]
            },
            {
              "key": "J",
              "name": "java",
              "commands": [
                "workbench.action.createTerminalEditor",
                "workbench.action.terminal.sendSequence",
                "workbench.action.terminal.sendSequence",
                "workbench.action.terminal.sendSequence",
                "workbench.action.createTerminalEditor",
                "workbench.action.terminal.sendSequence"
              ],
              "args": [
                null,
                {
                  "text": "pixi global install gradle openjdk \n"
                },
                {
                  "text": "pixi exec curl cht.sh/gradle \n"
                },
                {
                  "text": "pixi exec curl cht.sh/java \n"
                },
                null,
                {
                  "text": "code --install-extension vscjava.vscode-java-pack \n"
                }
              ]
            },
            {
              "key": "k",
              "name": "jupyter and kaggle",
              "commands": [
                "workbench.action.createTerminalEditor",
                "workbench.action.terminal.sendSequence",
                "workbench.action.terminal.sendSequence",
                "workbench.action.terminal.sendSequence",
                "workbench.action.terminal.sendSequence"
              ],
              "args": [
                null,
                {
                  "text": "pixi global install kaggle; pixi init; pixi add python ipykernel; # then `pixi shell` on Unix and `pixi run zsh` on Windows \n"
                },
                {
                  "text": "code --install-extension ms-toolsai.jupyter                                                                                 \n"
                },
                {
                  "text": "# kaggle kernels init # requires API KEY then edit generated kernel-metadata.json                                           \n"
                },
                {
                  "text": "# kaggle kernels push; kaggle kernel output <owner/notebook> # https://www.kaggle.com/code/owner/notebook                   \n"
                }
              ]
            },
            {
              "key": "M",
              "name": "Mysql Postgresql (installer link) ",
              "commands": [
                "vscode.open",
                "vscode.open",
                "vscode.open",
                "vscode.open",
                "workbench.action.createTerminalEditor",
                "workbench.action.terminal.sendSequence"
              ],
              "args": [
                "https://hub.docker.com/_/mysql",
                "https://hub.docker.com/_/postgres",
                "https://devhints.io/mysql",
                "https://devhints.io/docker",
                null,
                {
                  "text": "code --install-extension joe-re.sql-language-server --install-extension qwtel.sqlite-viewer --install-extension inferrinizzard.prettier-sql-vscode \n"
                }
              ]
            },
            {
              "key": "p",
              "name": "python",
              "commands": [
                "workbench.action.createTerminalEditor",
                "workbench.action.terminal.sendSequence",
                "workbench.action.terminal.sendSequence",
                "workbench.action.terminal.sendSequence",
                "workbench.action.createTerminalEditor",
                "workbench.action.terminal.sendSequence",
                "workbench.action.terminal.sendSequence"
              ],
              "args": [
                null,
                {
                  "text": "pixi global install python \n"
                },
                {
                  "text": "pixi exec curl cht.sh/python \n"
                },
                {
                  "text": "pixi exec curl cht.sh/pixi \n"
                },
                null,
                {
                  "text": "code --install-extension ms-python.black-formatter    --install-extension ms-python.python          --install-extension jjjermiah.pixi-vscode   \n"
                },
                {
                  "text": "code --install-extension snippington.snp-pandas-basic --install-extension devil-cyber.keras-snippet --install-extension changkaiyan.tf2snippets \n"
                }
              ]
            },
            {
              "key": "P",
              "name": "php",
              "commands": [
                "workbench.action.createTerminalEditor",
                "workbench.action.terminal.sendSequence",
                "workbench.action.terminal.sendSequence",
                "workbench.action.terminal.sendSequence",
                "workbench.action.createTerminalEditor",
                "workbench.action.terminal.sendSequence"
              ],
              "args": [
                null,
                {
                  "text": "pixi global install php \n"
                },
                {
                  "text": "pixi exec curl cht.sh/php \n"
                },
                {
                  "text": "pixi exec curl cht.sh/composer \n"
                },
                null,
                {
                  "text": "code --install-extension zobo.php-intellisense --install-extension DEVSENSE.composer-php-vscode --install-extension onecentlin.laravel-extension-pack \n"
                }
              ]
            },
            {
              "key": "r",
              "name": "rust",
              "commands": [
                "workbench.action.createTerminalEditor",
                "workbench.action.terminal.sendSequence",
                "workbench.action.terminal.sendSequence",
                "workbench.action.terminal.sendSequence",
                "workbench.action.createTerminalEditor",
                "workbench.action.terminal.sendSequence"
              ],
              "args": [
                null,
                {
                  "text": "pixi global install rust --with rust-src \n"
                },
                {
                  "text": "pixi exec curl cht.sh/rustc \n"
                },
                {
                  "text": "pixi exec curl cht.sh/cargo \n"
                },
                null,
                {
                  "text": "code --install-extension rust-lang.rust-analyzer \n"
                }
              ]
            },
            {
              "key": "R",
              "name": "retronvim extra extensions",
              "commands": [
                "workbench.action.createTerminalEditor",
                "workbench.action.terminal.sendSequence",
                "workbench.action.terminal.sendSequence",
                "workbench.action.terminal.sendSequence"
              ],
              "args": [
                null,
                {
                  "text": "code --install-extension alefragnani.Bookmarks   --install-extension usernamehw.errorlens                 --install-extension lamartire.git-indicators --install-extension christian-kohler.path-intellisense \n"
                },
                {
                  "text": "code --install-extension Katsute.code-background --install-extension DanielPriestley.poimandres-alternate --install-extension miguelsolorio.symbols    --install-extension drewxs.tokyo-night-dark            \n"
                },
                {
                  "text": "code --install-extension Google.geminicodeassist --install-extension MarsCode.marscode-extension          --install-extension supermaven.supermaven                                                           \n"
                }
              ]
            },
            {
              "key": "s",
              "name": "svelte (javascript)",
              "commands": [
                "workbench.action.createTerminalEditor",
                "workbench.action.terminal.sendSequence",
                "workbench.action.terminal.sendSequence"
              ],
              "args": [
                null,
                {
                  "text": "code --install-extension svelte.svelte-vscode  --install-extension biomejs.biome \n"
                },
                {
                  "text": "# pnpm create vite \n pixi exec curl cht.sh/vite \n"
                }
              ]
            },
            {
              "key": "v",
              "name": "vue (javascript)",
              "commands": [
                "workbench.action.createTerminalEditor",
                "workbench.action.terminal.sendSequence",
                "workbench.action.terminal.sendSequence"
              ],
              "args": [
                null,
                {
                  "text": "code --install-extension mubaidr.vuejs-extension-pack  --install-extension biomejs.biome \n"
                },
                {
                  "text": "# pnpm create vite \n pixi exec curl cht.sh/vite \n "
                }
              ]
            },
            {
              "key": "y",
              "name": "toml and yaml",
              "commands": [
                "workbench.action.createTerminalEditor",
                "workbench.action.terminal.sendSequence"
              ],
              "args": [
                null,
                {
                  "text": "code --install-extension tamasfe.even-better-toml --install-extension redhat.vscode-yaml \n"
                }
              ]
            }
          ]
        },
        {
          "key": "l",
          "name": "+LSP",
          "bindings": [
            {
              "key": "a",
              "name": "Code Action Auto Fix",
              "command": "editor.action.autoFix"
            },
            {
              "key": "A",
              "name": "Code Action Refactor",
              "command": "editor.action.refactor"
            },
            {
              "key": "c",
              "name": "View Calls Hierarchy",
              "command": "references-view.showCallHierarchy"
            },
            {
              "key": "d",
              "name": "Go to Definition",
              "command": "editor.action.revealDefinition"
            },
            {
              "key": "D",
              "name": "Go to Declaration",
              "command": "editor.action.revealDeclaration"
            },
            {
              "key": "F",
              "name": "Format",
              "command": "editor.action.format"
            },
            {
              "key": "h",
              "name": "Hover",
              "command": "editor.action.showHover"
            },
            {
              "key": "H",
              "name": "Signature help",
              "command": "editor.action.triggerParameterHints"
            },
            {
              "key": "I",
              "name": "Go to Implementation",
              "command": "editor.action.goToImplementation"
            },
            {
              "key": "l",
              "name": "Jump to last change",
              "command": "workbench.action.navigateToLastEditLocation"
            },
            {
              "key": "n",
              "name": "Next Problem (vscodevim)",
              "commands": [
                "toggleVim",
                "editor.action.marker.next",
                "toggleVim",
                "extension.vim_escape"
              ]
            },
            {
              "key": "N",
              "name": "Next Problem (vscode-neovim)",
              "command": "editor.action.marker.next"
            },
            {
              "key": "o",
              "name": "Open Diagnostics/Errors",
              "command": "editor.action.marker.next"
            },
            {
              "key": "p",
              "name": "Prev Problem (vscodevim)",
              "commands": [
                "toggleVim",
                "editor.action.marker.prev",
                "toggleVim",
                "extension.vim_escape"
              ]
            },
            {
              "key": "P",
              "name": "Prev Problem (vscode-neovim)",
              "command": "editor.action.marker.prev"
            },
            {
              "key": "q",
              "name": "Diagnostic List",
              "command": "workbench.actions.view.problems"
            },
            {
              "key": "Q",
              "name": "Quick Fix aka Code Action",
              "command": "editor.action.quickFix"
            },
            {
              "key": "r",
              "name": "Go to References",
              "command": "editor.action.goToReferences"
            },
            {
              "key": "R",
              "name": "Rename",
              "command": "editor.action.rename"
            },
            {
              "key": "s",
              "name": "Go To Symbol",
              "command": "workbench.action.gotoSymbol"
            },
            {
              "key": "S",
              "name": "Show All Symbols",
              "command": "workbench.action.showAllSymbols"
            },
            {
              "key": "t",
              "name": "Go to typedefinition",
              "command": "editor.action.goToTypeDefinition"
            },
            {
              "key": "v",
              "name": "View All Diagnostics",
              "command": "workbench.actions.view.problems"
            },
            {
              "key": "V",
              "name": "View All References",
              "command": "references-view.find"
            },
            {
              "key": "w",
              "name": "View All Implementations",
              "command": "references-view.findImplementations"
            },
            {
              "key": "W",
              "name": "View All Definition",
              "command": "editor.action.revealDefinitionAside"
            },
            {
              "key": "z",
              "name": "Symbols Outline",
              "command": "outline.focus"
            },
            {
              "key": "=",
              "name": "Format document",
              "command": "editor.action.formatDocument"
            },
            {
              "key": "<",
              "name": "Prev Reference",
              "command": "editor.action.wordHighlight.prev"
            },
            {
              "key": ">",
              "name": "Next Reference",
              "command": "editor.action.wordHighlight.next"
            }
          ]
        },
        {
          "key": "m",
          "name": "+Bookmarks extension",
          "bindings": [
            {
              "key": "c",
              "name": "Clear Bookmarks",
              "command": "bookmarks.clear"
            },
            {
              "key": "j",
              "name": "Next Bookmark",
              "command": "bookmarks.jumpToNext"
            },
            {
              "key": "k",
              "name": "Previous Bookmark",
              "command": "bookmarks.jumpToPrevious"
            },
            {
              "key": "l",
              "name": "List Bookmarks",
              "command": "bookmarks.listFromAllFiles"
            },
            {
              "key": "r",
              "name": "Refresh Bookmarks",
              "command": "bookmarks.refresh"
            },
            {
              "key": "t",
              "name": "Toggle Bookmark",
              "command": "bookmarks.toggle"
            },
            {
              "key": "s",
              "name": "Show Bookmarks",
              "command": "workbench.view.extension.bookmarks"
            }
          ]
        },
        {
          "key": "o",
          "name": "Focus Explorer",
          "command": "workbench.view.explorer"
        },
        {
          "key": "O",
          "name": "+Open",
          "bindings": [
            {
              "key": "d",
              "name": "Directory",
              "command": "workbench.action.files.openFolder"
            },
            {
              "key": "c",
              "name": "Cursor prompt (include selection)",
              "command": "aipopup.action.modal.generate"
            },
            {
              "key": "C",
              "name": "Cursor chat (include selection)",
              "command": "composer.startComposerPrompt"
            },
            {
              "key": ">",
              "name": "Gemini prompt",
              "command": "geminicodeassist.showinEditor"
            },
            {
              "key": "g",
              "name": "Gemini chat",
              "command": "workbench.view.extension.geminiChat"
            },
            {
              "key": "G",
              "name": "Gemini chat (include selection)",
              "command": "geminicodeassist.terminal.addSelectionToChatContext"
            },
            {
              "key": "f",
              "name": "File",
              "command": "workbench.action.files.openFile"
            },
            {
              "key": "m",
              "name": "Markdown previewer",
              "command": "markdown.showPreview"
            },
            {
              "key": "r",
              "name": "Recent git projects",
              "command": "workbench.action.openRecent"
            },
            {
              "key": "t",
              "name": "TRAE chat",
              "command": "trae.chat"
            },
            {
              "key": "T",
              "name": "TRAE chat (include selection)",
              "command": "trae.add.context.menu"
            },
            {
              "key": "w",
              "name": "Windsurf prompt (include selection)",
              "command": "windsurf.prioritized.command.open"
            },
            {
              "key": "W",
              "name": "Windsurf chat (include selection)",
              "command": "windsurf.prioritized.chat.open"
            }
          ]
        },
        {
          "key": "p",
          "name": "+Peek",
          "bindings": [
            {
              "key": "c",
              "name": "Calls Hierarchy",
              "command": "editor.showCallHierarchy"
            },
            {
              "key": "d",
              "name": "Definition",
              "command": "editor.action.peekDefinition"
            },
            {
              "key": "D",
              "name": "Declaration",
              "command": "editor.action.peekDeclaration"
            },
            {
              "key": "h",
              "name": "Show Hover",
              "command": "editor.action.showHover"
            },
            {
              "key": "H",
              "name": "Hover Definition",
              "command": "editor.action.showDefinitionPreviewHover"
            },
            {
              "key": "I",
              "name": "Implementation",
              "command": "editor.action.peekImplementation"
            },
            {
              "key": "p",
              "name": "Toggle Peek Focus",
              "command": "togglePeekWidgetFocus"
            },
            {
              "key": "r",
              "name": "References",
              "command": "editor.action.referenceSearch.trigger"
            },
            {
              "key": "t",
              "name": "Type Definition",
              "command": "editor.action.peekTypeDefinition"
            }
          ]
        },
        {
          "key": "s",
          "name": "+Search",
          "bindings": [
            {
              "key": "c",
              "name": "open chatgpt.com",
              "command": "vscode.open",
              "args": "https://chatgpt.com"
            },
            {
              "key": "C",
              "name": "open cheat.sh",
              "command": "vscode.open",
              "args": "https://cheat.sh"
            },
            {
              "key": "d",
              "name": "open devhints cheatsheets",
              "command": "vscode.open",
              "args": "https://devhints.io"
            },
            {
              "key": "f",
              "name": "Find and replace",
              "command": "editor.action.startFindReplaceAction"
            },
            {
              "key": "p",
              "name": "Project",
              "command": "workbench.action.replaceInFiles"
            },
            {
              "key": "r",
              "name": "Ripgrep",
              "command": "search.action.openNewEditor"
            },
            {
              "key": "s",
              "name": "Search and Insert snippet",
              "command": "editor.action.insertSnippet"
            },
            {
              "key": "S",
              "name": "Show search panel",
              "command": "workbench.view.search"
            },
            {
              "key": "t",
              "name": "Text in Files",
              "command": "workbench.action.findInFiles"
            },
            {
              "key": "T",
              "name": "Text in Folder",
              "command": "filesExplorer.findInFolder"
            },
            {
              "key": "u",
              "name": "50000+ tailwind templates (uipilot.dev)",
              "command": "vscode.open",
              "args": "https://uipilot.dev"
            },
            {
              "key": "U",
              "name": "tailwind templates (figma.com + FigmaToCode)",
              "command": "vscode.open",
              "args": "https://www.figma.com/community"
            },
            {
              "key": "v",
              "name": "6000+ tailwind elements (uiverse.io)",
              "command": "vscode.open",
              "args": "https://uiverse.io/"
            },
            {
              "key": "w",
              "name": "2400+ tailwind components (tailwindflex.com)",
              "command": "vscode.open",
              "args": "https://tailwindflex.com"
            },
            {
              "key": "W",
              "name": "600+ tailwind components (creative-tim.com)",
              "command": "vscode.open",
              "args": "https://www.creative-tim.com/twcomponents"
            }
          ]
        },
        {
          "key": "t",
          "name": "+Terminal",
          "bindings": [
            {
              "key": " ",
              "name": "terminal copy mode",
              "command": "runCommands",
              "args": {
                "commands": [
                  {
                    "command": "workbench.action.terminal.selectAll"
                  },
                  {
                    "command": "editor.action.clipboardCopyAction"
                  },
                  {
                    "command": "workbench.action.files.newUntitledFile"
                  },
                  {
                    "command": "editor.action.clipboardPasteAction"
                  }
                ]
              }
            },
            {
              "key": ":",
              "name": "Scrollback Buffer",
              "command": "workbench.action.terminal.focusAccessibleBuffer"
            },
            {
              "key": ".",
              "name": "Copy Scrollback",
              "command": "runCommands",
              "args": {
                "commands": [
                  {
                    "command": "workbench.action.terminal.selectAll"
                  },
                  {
                    "command": "editor.action.clipboardCopyAction"
                  }
                ]
              }
            },
            {
              "key": "0",
              "name": "Focus tabs view",
              "command": "workbench.action.terminal.focusTabs"
            },
            {
              "key": "1",
              "name": "Focus index 1",
              "command": "workbench.action.terminal.focusAtIndex1"
            },
            {
              "key": "2",
              "name": "Focus index 2",
              "command": "workbench.action.terminal.focusAtIndex2"
            },
            {
              "key": "3",
              "name": "Focus index 3",
              "command": "workbench.action.terminal.focusAtIndex3"
            },
            {
              "key": "4",
              "name": "Focus index 4",
              "command": "workbench.action.terminal.focusAtIndex4"
            },
            {
              "key": "5",
              "name": "Focus index 5",
              "command": "workbench.action.terminal.focusAtIndex5"
            },
            {
              "key": "6",
              "name": "Focus index 6",
              "command": "workbench.action.terminal.focusAtIndex6"
            },
            {
              "key": "7",
              "name": "Focus index 7",
              "command": "workbench.action.terminal.focusAtIndex7"
            },
            {
              "key": "8",
              "name": "Focus index 8",
              "command": "workbench.action.terminal.focusAtIndex8"
            },
            {
              "key": "9",
              "name": "Focus index 9",
              "command": "workbench.action.terminal.focusAtIndex9"
            },
            {
              "key": "b",
              "name": "Move terminal to buffer",
              "command": "workbench.action.terminal.moveToEditor"
            },
            {
              "key": "B",
              "name": "Move buffer to terminal",
              "command": "workbench.action.terminal.moveToTerminalPanel"
            },
            {
              "key": "!",
              "name": "Break panel",
              "command": "workbench.action.terminal.unsplit"
            },
            {
              "key": "-",
              "name": "Join panel (instances)",
              "command": "workbench.action.terminal.joinInstance"
            },
            {
              "key": "+",
              "name": "Join panel (select)",
              "command": "workbench.action.terminal.join"
            },
            {
              "key": "x",
              "name": "Close panel",
              "command": "workbench.action.terminal.kill"
            },
            {
              "key": "s",
              "name": "Focus previous terminal group",
              "command": "workbench.action.terminal.focusPrevious"
            },
            {
              "key": "f",
              "name": "Focus next terminal group",
              "command": "workbench.action.terminal.focusNext"
            },
            {
              "key": "S",
              "name": "Move panel to Last position",
              "commands": [
                "workbench.action.terminal.moveToEditor",
                "workbench.action.terminal.moveToTerminalPanel"
              ]
            },
            {
              "key": "F",
              "name": "Move panel to Last position",
              "commands": [
                "workbench.action.terminal.moveToEditor",
                "workbench.action.terminal.moveToTerminalPanel"
              ]
            },
            {
              "key": "h",
              "name": "Focus previous panel",
              "command": "workbench.action.terminal.focusPreviousPane"
            },
            {
              "key": "j",
              "name": "Focus next panel",
              "command": "workbench.action.terminal.focusNextPane"
            },
            {
              "key": "k",
              "name": "Focus previous panel",
              "command": "workbench.action.terminal.focusPreviousPane"
            },
            {
              "key": "l",
              "name": "Focus next panel",
              "command": "workbench.action.terminal.focusNextPane"
            },
            {
              "key": "H",
              "name": "Resize Panel left",
              "command": "workbench.action.terminal.resizePaneLeft"
            },
            {
              "key": "J",
              "name": "Resize Panel down",
              "command": "workbench.action.terminal.resizePaneDown"
            },
            {
              "key": "K",
              "name": "Resize Panel up",
              "command": "workbench.action.terminal.resizePaneUp"
            },
            {
              "key": "L",
              "name": "Resize Panel right",
              "command": "workbench.action.terminal.resizePaneRight"
            },
            {
              "key": ",",
              "name": "Rename terminal",
              "command": "workbench.action.terminal.rename"
            },
            {
              "key": "n",
              "name": "Focus next terminal group",
              "command": "workbench.action.terminal.focusNext"
            },
            {
              "key": "p",
              "name": "Focus previous terminal group",
              "command": "workbench.action.terminal.focusPrevious"
            },
            {
              "key": "v",
              "name": "split Vertical Tab/Panel terminal",
              "command": "workbench.action.terminal.splitInActiveWorkspace"
            },
            {
              "key": "V",
              "name": "split Horizontal Tab/Panel terminal",
              "commands": [
                "workbench.action.terminal.split",
                "workbench.action.moveActiveEditorGroupDown"
              ]
            },
            {
              "key": "t",
              "name": "Neovim panel terminal (<esc><esc> for tmux-copy-mode)",
              "commands": [
                "workbench.action.terminal.new",
                "workbench.action.terminal.sendSequence"
              ],
              "args": [
                null,
                {
                  "text": "nvim -cterm; exit\n"
                }
              ]
            },
            {
              "key": "T",
              "name": "Neovim Tab terminal (<esc><esc> for tmux-copy-mode)",
              "commands": [
                "workbench.action.createTerminalEditor",
                "workbench.action.terminal.sendSequence"
              ],
              "args": [
                null,
                {
                  "text": "nvim -cterm; exit\n"
                }
              ]
            },
            {
              "key": "w",
              "name": "New Tab terminal (same window group)",
              "command": "workbench.action.createTerminalEditor"
            },
            {
              "key": "W",
              "name": "New Tab terminal (Separated window group)",
              "command": "workbench.action.createTerminalEditorSide"
            },
            {
              "key": "y",
              "name": "New panel terminal (dafault shell)",
              "command": "workbench.action.terminal.newInActiveWorkspace"
            },
            {
              "key": "Y",
              "name": "New panel terminal (choose shell)",
              "command": "workbench.action.terminal.newWithProfile"
            },
            {
              "key": "z",
              "name": "Toggle maximized panel",
              "command": "workbench.action.toggleMaximizedPanel"
            },
            {
              "key": "/",
              "name": "Focus terminal (find terminal panel)",
              "command": "workbench.action.terminal.toggleTerminal"
            },
            {
              "key": "\\",
              "name": "Toggle terminal",
              "command": "workbench.action.togglePanel"
            }
          ]
        },
        {
          "key": "u",
          "name": "+UI toggles",
          "bindings": [
            {
              "key": "b",
              "name": "Toggle activity bar",
              "command": "workbench.action.toggleActivityBarVisibility"
            },
            {
              "key": "B",
              "name": "Toggle menu bar",
              "command": "workbench.action.toggleMenuBar"
            },
            {
              "key": "f",
              "name": "Toggle full screen",
              "command": "workbench.action.toggleFullScreen"
            },
            {
              "key": "k",
              "name": "Show keys on screen (Screencast Mode)",
              "command": "workbench.action.toggleScreencastMode"
            },
            {
              "key": "m",
              "name": "Toggle maximized panel",
              "command": "workbench.action.toggleMaximizedPanel"
            },
            {
              "key": "M",
              "name": "Toggle Minimap",
              "command": "editor.action.toggleMinimap"
            },
            {
              "key": "P",
              "name": "Toggle panel visibility",
              "command": "workbench.action.togglePanel"
            },
            {
              "key": "r",
              "name": "Show remote explorer",
              "command": "workbench.view.remote"
            },
            {
              "key": "s",
              "name": "Toggle sidebar visibility",
              "command": "workbench.action.toggleSidebarVisibility"
            },
            {
              "key": "S",
              "name": "Toggle sec-sidebar visibility",
              "command": "workbench.action.toggleAuxiliaryBar"
            },
            {
              "key": "t",
              "name": "Select theme",
              "command": "workbench.action.selectTheme"
            },
            {
              "key": "T",
              "name": "Toggle tab visibility",
              "command": "workbench.action.toggleTabsVisibility"
            },
            {
              "key": "u",
              "name": "Go to Parent Fold",
              "commands": [
                "editor.gotoParentFold",
                "cursorHome"
              ]
            },
            {
              "key": "U",
              "name": "Go to Bracket",
              "command": "editor.action.jumpToBracket"
            },
            {
              "key": "w",
              "name": "Toggle Wrap",
              "command": "editor.action.toggleWordWrap"
            },
            {
              "key": "x",
              "name": "Extensions",
              "command": "workbench.view.extensions"
            },
            {
              "key": "z",
              "name": "Toggle zen mode",
              "command": "workbench.action.toggleZenMode"
            },
            {
              "key": "Z",
              "name": "Zoom reset",
              "command": "editor.action.fontZoomReset"
            }
          ]
        },
        {
          "key": "v",
          "name": "Open/Move Terminal to Vertical split",
          "commands": [
            "workbench.action.positionPanelRight",
            "workbench.action.terminal.focus"
          ]
        },
        {
          "key": "V",
          "name": "Open/Move Terminal to Horizontal split",
          "commands": [
            "workbench.action.positionPanelBottom",
            "workbench.action.terminal.focus"
          ]
        },
        {
          "key": "w",
          "name": "+Window",
          "bindings": [
            {
              "key": ";",
              "name": "Recent editor group",
              "commands": [
                "workbench.action.quickOpenPreviousRecentlyUsedEditor",
                "workbench.action.acceptSelectedQuickOpenItem"
              ]
            },
            {
              "key": "c",
              "name": "Combine all editors",
              "command": "workbench.action.joinAllGroups"
            },
            {
              "key": "C",
              "name": "Close all editor groups",
              "command": "workbench.action.closeAllGroups"
            },
            {
              "key": "f",
              "name": "Focus editor group",
              "command": "workbench.action.focusActiveEditorGroup"
            },
            {
              "key": "h",
              "name": "Move editor group left",
              "command": "workbench.action.moveActiveEditorGroupLeft"
            },
            {
              "key": "j",
              "name": "Move editor group down",
              "command": "workbench.action.moveActiveEditorGroupDown"
            },
            {
              "key": "k",
              "name": "Move editor group up",
              "command": "workbench.action.moveActiveEditorGroupUp"
            },
            {
              "key": "l",
              "name": "Move editor group right",
              "command": "workbench.action.moveActiveEditorGroupRight"
            },
            {
              "key": "H",
              "name": "Decrease editor group",
              "command": "workbench.action.decreaseViewSize"
            },
            {
              "key": "J",
              "name": "Increase editor group",
              "command": "workbench.action.increaseViewSize"
            },
            {
              "key": "K",
              "name": "Decrease editor group",
              "command": "workbench.action.decreaseViewSize"
            },
            {
              "key": "L",
              "name": "Increase editor group",
              "command": "workbench.action.increaseViewSize"
            },
            {
              "key": "m",
              "name": "Toggle Maximized editor group mode",
              "command": "workbench.action.toggleMaximizeEditorGroup"
            },
            {
              "key": "M",
              "name": "Minimize other editors group",
              "command": "workbench.action.minimizeOtherEditors"
            },
            {
              "key": "n",
              "name": "Focus next editor group",
              "command": "workbench.action.focusNextGroup"
            },
            {
              "key": "p",
              "name": "Focus previous editor group",
              "command": "workbench.action.focusPreviousGroup"
            },
            {
              "key": "t",
              "name": "Toggle editor group sizes",
              "command": "workbench.action.toggleEditorWidths"
            },
            {
              "key": "v",
              "name": "Split Vertical",
              "command": "workbench.action.splitEditor"
            },
            {
              "key": "V",
              "name": "Split Horizontal",
              "command": "workbench.action.splitEditorDown"
            },
            {
              "key": "x",
              "name": "Close editor group",
              "command": "workbench.action.closeEditorsInGroup"
            },
            {
              "key": "=",
              "name": "Reset editor group sizes",
              "command": "workbench.action.evenEditorWidths"
            }
          ]
        },
        {
          "key": "x",
          "name": "Close active editor",
          "command": "workbench.action.closeActiveEditor"
        },
        {
          "key": "y",
          "name": "+File Manager (alt+y reopens)",
          "bindings": [
            {
              "key": "y",
              "name": "open and export `y` command (on new terminal)",
              "commands": [
                "workbench.action.createTerminalEditor",
                "workbench.action.terminal.sendSequence"
              ],
              "args": [
                null,
                {
                  "text": "function y() { yazi --cwd-file=$HOME/.yazi \"$@\"; cd $(cat $HOME/.yazi); }; y; clear\n"
                }
              ]
            },
            {
              "key": "O",
              "name": "open y='cd when yazi exits, press q to exit yazi' (on current terminal)",
              "command": "workbench.action.terminal.sendSequence",
              "args": {
                "text": "y\n"
              }
            },
            {
              "key": "Y",
              "name": "print sequence to export `y` command (on current terminal)",
              "command": "workbench.action.terminal.sendSequence",
              "args": {
                "text": "function y() { yazi --cwd-file=$HOME/.yazi \"$@\"; cd $(cat $HOME/.yazi); }"
              }
            },
            {
              "key": "V",
              "name": "print sequence to export vi = mini.nvim + snacks.nvim",
              "command": "workbench.action.terminal.sendSequence",
              "args": {
                "text": "function vi() { sh -c \"$EDITOR $@\"; } # ($EDITOR) # eval $EDITOR # iex $env:EDITOR \n"
              }
            },
            {
              "key": "C",
              "name": "print sequence to clear_previous_line (on current terminal)",
              "command": "workbench.action.terminal.sendSequence",
              "args": {
                "text": "printf '\\x1b[2A\\x1b[K'\n"
              }
            },
            {
              "key": "?",
              "name": "print sequence to show yazi keybindings menu (when inside yazi)",
              "command": "workbench.action.terminal.sendSequence",
              "args": {
                "text": "~"
              }
            }
          ]
        },
        {
          "key": "Y",
          "name": "+Sync",
          "bindings": [
            {
              "key": "c",
              "name": "Sync Show Conflicts",
              "command": "workbench.userDataSync.actions.showConflicts"
            },
            {
              "key": "d",
              "name": "Sync Show Data",
              "command": "workbench.userDataSync.actions.showSyncedData"
            },
            {
              "key": "k",
              "name": "open keybindings.json",
              "command": "workbench.action.openGlobalKeybindingsFile"
            },
            {
              "key": "l",
              "name": "Sync Logs",
              "command": "workbench.userDataSync.actions.showLog"
            },
            {
              "key": "n",
              "name": "Sync Now",
              "command": "workbench.userDataSync.actions.syncNow"
            },
            {
              "key": "p",
              "name": "Switch profile",
              "command": "workbench.profiles.actions.switchProfile"
            },
            {
              "key": "s",
              "name": "open settings.json",
              "command": "workbench.action.openSettingsJson"
            }
          ]
        },
        {
          "key": "z",
          "name": "+Folding",
          "bindings": [
            {
              "key": "a",
              "name": "Toggle Fold",
              "command": "editor.toggleFold"
            },
            {
              "key": "c",
              "name": "Close Fold",
              "command": "editor.fold"
            },
            {
              "key": "C",
              "name": "Close Fold Recursively",
              "command": "editor.foldRecursively"
            },
            {
              "key": "M",
              "name": "Close All Folds",
              "command": "editor.foldAll"
            },
            {
              "key": "j",
              "name": "Go to Next Fold",
              "command": "editor.gotoNextFold"
            },
            {
              "key": "k",
              "name": "Go to Previous Fold",
              "command": "editor.gotoPreviousFold"
            },
            {
              "key": "o",
              "name": "Open Fold",
              "command": "editor.unfold"
            },
            {
              "key": "O",
              "name": "Open Fold Recursively",
              "command": "editor.unfoldRecursively"
            },
            {
              "key": "R",
              "name": "Open All Folds",
              "command": "editor.unfoldAll"
            }
          ]
        }
      ]
    },
    "keybindings": [
      {
        "key": "shift+u",
        "command": "whichkey.repeatMostRecent",
        "when": "editorTextFocus && (vim.mode == 'Normal' || neovim.mode == 'normal')"
      },
      {
        "key": "/",
        "command": "list.find",
        "when": "listFocus && listSupportsFind && !inputFocus"
      },
      {
        "key": "a",
        "command": "explorer.newFile",
        "when": "filesExplorerFocus && !inputFocus"
      },
      {
        "key": "e",
        "command": "whichkey.triggerKey",
        "args": {
          "key": "e",
          "when": "sideBarVisible && explorerViewletVisible"
        },
        "when": "whichkeyVisible && sideBarVisible && explorerViewletVisible"
      },
      {
        "key": "d",
        "command": "deleteFile",
        "when": "filesExplorerFocus && !inputFocus"
      },
      {
        "key": "p",
        "command": "filesExplorer.paste",
        "when": "filesExplorerFocus && !inputFocus"
      },
      {
        "key": "q",
        "command": "workbench.action.toggleSidebarVisibility",
        "when": "listFocus && !inputFocus"
      },
      {
        "key": "r",
        "command": "renameFile",
        "when": "filesExplorerFocus && !inputFocus"
      },
      {
        "key": "v",
        "command": "runCommands",
        "args": {
          "commands": [
            "explorer.openToSide",
            "workbench.action.toggleSidebarVisibility"
          ]
        },
        "when": "listFocus && !inputFocus"
      },
      {
        "key": "shift+v",
        "command": "runCommands",
        "args": {
          "commands": [
            "workbench.action.splitEditorDown",
            "explorer.openAndPassFocus",
            "workbench.action.closeOtherEditors",
            "workbench.action.toggleSidebarVisibility"
          ]
        },
        "when": "listFocus && !inputFocus"
      },
      {
        "key": "x",
        "command": "filesExplorer.cut",
        "when": "filesExplorerFocus && !inputFocus"
      },
      {
        "key": "y",
        "command": "filesExplorer.copy",
        "when": "filesExplorerFocus && !inputFocus"
      },
      {
        "key": "Down",
        "command": "runCommands",
        "args": {
          "commands": [
            "list.focusDown",
            "filesExplorer.openFilePreserveFocus"
          ]
        },
        "when": "listFocus && !inputFocus"
      },
      {
        "key": "Up",
        "command": "runCommands",
        "args": {
          "commands": [
            "list.focusUp",
            "filesExplorer.openFilePreserveFocus"
          ]
        },
        "when": "listFocus && !inputFocus"
      },
      {
        "key": "shift+j",
        "command": "runCommands",
        "args": {
          "commands": [
            "list.focusDown",
            "list.focusDown",
            "list.focusDown",
            "list.focusDown",
            "list.focusDown",
            "list.focusDown",
            "list.focusDown",
            "list.focusDown",
            "list.focusDown",
            "list.focusDown"
          ]
        },
        "when": "listFocus && !inputFocus"
      },
      {
        "key": "shift+k",
        "command": "runCommands",
        "args": {
          "commands": [
            "list.focusUp",
            "list.focusUp",
            "list.focusUp",
            "list.focusUp",
            "list.focusUp",
            "list.focusUp",
            "list.focusUp",
            "list.focusUp",
            "list.focusUp",
            "list.focusUp"
          ]
        },
        "when": "listFocus && !inputFocus"
      },
      {
        "key": "shift+l",
        "command": "runCommands",
        "args": {
          "commands": [
            "list.select",
            "workbench.action.toggleSidebarVisibility"
          ]
        },
        "when": "listFocus && !inputFocus"
      },
      {
        "key": "shift+o",
        "command": "runCommands",
        "args": {
          "commands": [
            "explorer.openAndPassFocus",
            "workbench.view.explorer"
          ]
        },
        "when": "listFocus && !inputFocus"
      },
      {
        "key": "ctrl+\\",
        "command": "workbench.action.togglePanel"
      },
      {
        "key": "shift+space",
        "command": "whichkey.show"
      },
      {
        "key": "alt+space",
        "command": "whichkey.show"
      },
      {
        "key": "alt+c",
        "command": "editor.action.clipboardCopyAction",
        "when": "!terminalFocus"
      },
      {
        "key": "alt+v",
        "command": "editor.action.clipboardPasteAction",
        "when": "!terminalFocus"
      },
      {
        "key": "alt+c",
        "command": "workbench.action.terminal.copySelection",
        "when": "terminalFocus"
      },
      {
        "key": "alt+v",
        "command": "workbench.action.terminal.paste",
        "when": "terminalFocus"
      },
      {
        "key": "alt+h",
        "command": "extension.vim_escape",
        "when": "editorTextFocus && (vim.mode == 'Insert' || vim.mode == 'Visual' || vim.mode == 'VisualLine' || vim.mode == 'VisualBlock)"
      },
      {
        "key": "alt+h",
        "command": "vscode-neovim.send",
        "args": "<esc>",
        "when": "editorTextFocus && neovim.mode == 'insert' || neovim.mode == 'visual'"
      },
      {
        "key": "alt+s",
        "command": "workbench.action.previousEditor"
      },
      {
        "key": "alt+f",
        "command": "workbench.action.nextEditor"
      },
      {
        "key": "left",
        "command": "workbench.action.previousEditor",
        "when": "!terminalFocus && !sideBarFocus && ( neovim.mode == 'normal' || vim.mode == 'Normal' ) && editorTextFocus"
      },
      {
        "key": "right",
        "command": "workbench.action.nextEditor",
        "when": "!terminalFocus && !sideBarFocus && ( neovim.mode == 'normal' || vim.mode == 'Normal' ) && editorTextFocus"
      },
      {
        "key": "ctrl+h",
        "command": "workbench.action.navigateLeft",
        "when": "neovim.mode == 'normal' || vim.mode == 'Normal'"
      },
      {
        "key": "ctrl+j",
        "command": "workbench.action.navigateDown",
        "when": "neovim.mode == 'normal' || vim.mode == 'Normal'"
      },
      {
        "key": "ctrl+k",
        "command": "workbench.action.navigateUp",
        "when": "neovim.mode == 'normal' || vim.mode == 'Normal'"
      },
      {
        "key": "ctrl+l",
        "command": "workbench.action.navigateRight",
        "when": "!terminalFocus && neovim.mode == 'normal'"
      },
      {
        "key": "ctrl+l",
        "command": "workbench.action.navigateRight",
        "when": "!terminalFocus && vim.mode == 'Normal'"
      },
      {
        "key": "ctrl+space",
        "command": "editor.action.triggerSuggest",
        "when": "!suggestWidgetVisible && textInputFocus"
      },
      {
        "key": "ctrl+space",
        "command": "hideSuggestWidget",
        "when": "suggestWidgetVisible && textInputFocus"
      },
      {
        "key": "ctrl+shift+space",
        "command": "toggleSuggestionDetails",
        "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus"
      },
      {
        "key": "ctrl+shift+space",
        "command": "editor.action.triggerParameterHints",
        "when": "editorHasSignatureHelpProvider && editorTextFocus"
      },
      {
        "key": "ctrl+shift+space",
        "command": "closeParameterHints",
        "when": "editorTextFocus && parameterHintsVisible"
      },
      {
        "key": "ctrl+h",
        "command": "toggleSuggestionFocus",
        "when": "suggestWidgetVisible && textInputFocus"
      },
      {
        "key": "alt+j",
        "command": "editor.action.inlineSuggest.acceptNextWord",
        "when": "cppSuggestion || inlineSuggestionVisible || inlineEditIsVisible"
      },
      {
        "key": "alt+k",
        "command": "editor.action.inlineSuggest.acceptNextLine",
        "when": "inlineSuggestionVisible || inlineEditIsVisible"
      },
      {
        "key": "alt+l",
        "command": "editor.action.inlineSuggest.commit",
        "when": "inlineSuggestionVisible || inlineEditIsVisible|| trae.hasInlineSuggestShouldAcceptDirect"
      },
      {
        "key": "alt+l",
        "command": "trae.acceptAllEdits",
        "when": "trae.hasEditOfCurrentEditor && !inlineSuggestionVisible"
      },
      {
        "key": "alt+l",
        "command": "geminicodeassist.nextEdit.acceptSuggestion",
        "when": "nextEditSessionActive"
      },
      {
        "key": "alt+l",
        "command": "geminicodeassist.nextEdit.startSession",
        "when": "nextEditSessionAvailable"
      },
      {
        "key": "alt+l",
        "command": "editor.action.acceptCursorTabSuggestion",
        "when": "cpp.shouldAcceptTab"
      },
      {
        "key": "alt+l",
        "command": "windsurf.prioritized.supercompleteAccept",
        "when": "!windsurf.interactiveCascade.isCursorPosInSuggestedAction && (windsurf.richGhostTextShown || windsurf.sideHintShown || windsurf.tabActionShown )"
      },
      {
        "key": "alt+l",
        "command": "windsurf.interactiveCascade.acceptSuggestedAction",
        "when": "windsurf.interactiveCascade.isCursorPosInSuggestedAction"
      },
      {
        "key": "alt+;",
        "command": "editor.action.inlineSuggest.triggerInlineEditExplicit",
        "when": "editorTextFocus"
      },
      {
        "key": "alt+;",
        "command": "trae.buildEditRequest",
        "when": "!trae.hasEditOfCurrentEditor"
      },
      {
        "key": "alt+;",
        "command": "geminicodeassist.generateCode",
        "when": "!nextEditSessionAvailable"
      },
      {
        "key": "alt+n",
        "command": "jumpToNextSnippetPlaceholder",
        "when": "hasNextTabstop && inSnippetMode && textInputFocus"
      },
      {
        "key": "alt+p",
        "command": "jumpToPrevSnippetPlaceholder",
        "when": "hasPrevTabstop && inSnippetMode && textInputFocus"
      },
      {
        "key": "ctrl+j",
        "command": "selectNextSuggestion",
        "when": "editorTextFocus && suggestWidgetVisible"
      },
      {
        "key": "ctrl+k",
        "command": "selectPrevSuggestion",
        "when": "editorTextFocus && suggestWidgetVisible"
      },
      {
        "key": "ctrl+l",
        "command": "acceptSelectedSuggestion",
        "when": "acceptSuggestionOnEnter && suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && suggestionMakesTextEdit && textInputFocus"
      },
      {
        "key": "ctrl+d",
        "command": "selectNextPageSuggestion",
        "when": "suggestWidgetVisible"
      },
      {
        "key": "ctrl+u",
        "command": "selectPrevPageSuggestion",
        "when": "suggestWidgetVisible"
      },
      {
        "key": "alt+y",
        "command": "workbench.action.terminal.sendSequence",
        "args": {
          "text": "yazi $PWD --cwd-file=$HOME/.yazi; cd \"$(cat $HOME/.yazi)\" \n"
        }
      },
      {
        "key": "alt+shift+d",
        "command": "workbench.action.terminal.scrollToNextCommand",
        "when": "terminalFocus"
      },
      {
        "key": "alt+shift+e",
        "command": "workbench.action.terminal.scrollToPreviousCommand",
        "when": "terminalFocus"
      },
      {
        "key": "alt+e",
        "command": "workbench.action.terminal.scrollUp",
        "when": "terminalFocus"
      },
      {
        "key": "alt+d",
        "command": "workbench.action.terminal.scrollDown",
        "when": "terminalFocus"
      },
      {
        "key": "alt+a",
        "command": "workbench.action.terminal.scrollDownPage",
        "when": "terminalFocus"
      },
      {
        "key": "alt+t",
        "command": "workbench.action.terminal.scrollToTop",
        "when": "terminalFocus"
      },
      {
        "key": "alt+g",
        "command": "workbench.action.terminal.scrollToBottom",
        "when": "terminalFocus"
      },
      {
        "key": "ctrl+shift+h",
        "command": "workbench.action.terminal.resizePaneLeft",
        "when": "terminalFocus"
      },
      {
        "key": "ctrl+shift+l",
        "command": "workbench.action.terminal.resizePaneRight",
        "when": "terminalFocus"
      },
      {
        "key": "ctrl+shift+j",
        "command": "workbench.action.terminal.resizePaneDown",
        "when": "terminalFocus"
      },
      {
        "key": "ctrl+shift+k",
        "command": "workbench.action.terminal.resizePaneUp",
        "when": "terminalFocus"
      },
      {
        "key": "ctrl+shift+h",
        "command": "workbench.action.decreaseViewSize",
        "when": "!terminalFocus"
      },
      {
        "key": "ctrl+shift+l",
        "command": "workbench.action.increaseViewSize",
        "when": "!terminalFocus"
      },
      {
        "key": "ctrl+shift+k",
        "command": "workbench.action.decreaseViewSize",
        "when": "!terminalFocus"
      },
      {
        "key": "ctrl+shift+j",
        "command": "workbench.action.increaseViewSize",
        "when": "!terminalFocus"
      },
      {
        "key": "ctrl+left",
        "command": "workbench.action.terminal.focusPreviousPane",
        "when": "terminalFocus"
      },
      {
        "key": "ctrl+right",
        "command": "workbench.action.terminal.focusNextPane",
        "when": "terminalFocus"
      },
      {
        "key": "enter",
        "command": "runCommands",
        "args": {
          "commands": [
            "selectNextSuggestion",
            "acceptSelectedSuggestion"
          ]
        },
        "when": "editorTextFocus && suggestWidgetVisible && !suggestWidgetHasFocusedSuggestion"
      },
      {
        "key": "tab",
        "command": "selectNextSuggestion",
        "when": "editorTextFocus && suggestWidgetVisible && !isSnippetMode && !hasNextTabstop"
      },
      {
        "key": "shift+tab",
        "command": "selectPrevSuggestion",
        "when": "editorTextFocus && suggestWidgetVisible && !isSnippetMode && !hasNextTabstop"
      },
      {
        "key": "tab",
        "command": "-extension.vim_tab"
      },
      {
        "key": "tab",
        "command": "-vscode-neovim.send"
      },
      {
        "key": "ctrl+v",
        "command": "-workbench.action.terminal.paste",
        "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
      }
    ]
  },
  "extensionPack": [
    "cuixiaorui.cvim",
    "VSpaceCode.whichkey"
  ],
  "extensionDependencies": []
}
